#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤ –∏–∑ media/bot/bulk_videos/
–ú–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ä—É—á–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
"""

import os
import sys
import django
from pathlib import Path

# Set up Django environment
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'instagram_uploader.settings')
django.setup()

from uploader.models import BulkUploadTask, BulkVideo
from django.utils import timezone
from datetime import timedelta
import logging

# Use centralized logging - all logs go to django.log
logger = logging.getLogger('scripts.cleanup_media_files')

def cleanup_orphaned_files():
    """–û—á–∏—Å—Ç–∏—Ç—å orphaned —Ñ–∞–π–ª—ã (—Ñ–∞–π–ª—ã –±–µ–∑ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –ë–î)"""
    media_dir = Path("media/bot/bulk_videos")
    
    if not media_dir.exists():
        print("[FOLDER] –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è media/bot/bulk_videos –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return 0
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    all_files = set(f.name for f in media_dir.glob("*.mp4"))
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(all_files)} —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –ë–î
    db_files = set()
    for video in BulkVideo.objects.all():
        if video.video_file:
            filename = os.path.basename(video.video_file.name)
            db_files.add(filename)
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(db_files)} —Ñ–∞–π–ª–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    
    # –ù–∞—Ö–æ–¥–∏–º orphaned —Ñ–∞–π–ª—ã
    orphaned_files = all_files - db_files
    print(f"[DELETE] –ù–∞–π–¥–µ–Ω–æ {len(orphaned_files)} orphaned —Ñ–∞–π–ª–æ–≤")
    
    deleted_count = 0
    for filename in orphaned_files:
        file_path = media_dir / filename
        try:
            file_path.unlink()
            deleted_count += 1
            print(f"[DELETE] –£–¥–∞–ª–µ–Ω orphaned —Ñ–∞–π–ª: {filename}")
        except Exception as e:
            print(f"[FAIL] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {filename}: {str(e)}")
    
    return deleted_count

def cleanup_completed_tasks_files(days_old=7):
    """–û—á–∏—Å—Ç–∏—Ç—å —Ñ–∞–π–ª—ã –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á —Å—Ç–∞—Ä—à–µ N –¥–Ω–µ–π"""
    cutoff_date = timezone.now() - timedelta(days=days_old)
    
    # –ù–∞–π—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ —Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π
    old_completed_tasks = BulkUploadTask.objects.filter(
        status__in=['COMPLETED', 'FAILED', 'PARTIALLY_COMPLETED'],
        updated_at__lt=cutoff_date
    )
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ {old_completed_tasks.count()} –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á —Å—Ç–∞—Ä—à–µ {days_old} –¥–Ω–µ–π")
    
    deleted_count = 0
    for task in old_completed_tasks:
        print(f"[CLIPBOARD] –û—á–∏—Å—Ç–∫–∞ –∑–∞–¥–∞—á–∏: {task.name} (ID: {task.id}, —Å—Ç–∞—Ç—É—Å: {task.status})")
        
        for video in task.videos.all():
            if video.video_file:
                try:
                    file_path = video.video_file.path if hasattr(video.video_file, 'path') else None
                    if file_path and os.path.exists(file_path):
                        # –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –¥—Ä—É–≥–∏–º–∏ –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏
                        def is_file_safe_to_delete():
                            filename = os.path.basename(file_path)
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥—Ä—É–≥–∏–µ BulkVideo –æ–±—ä–µ–∫—Ç—ã —Å —Ç–∞–∫–∏–º –∂–µ —Ñ–∞–π–ª–æ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö
                            other_videos_with_same_file = BulkVideo.objects.filter(
                                video_file__icontains=filename
                            ).exclude(
                                bulk_task=task  # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É
                            )
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –∑–∞–¥–∞—á –¥–ª—è —ç—Ç–∏—Ö –≤–∏–¥–µ–æ
                            for other_video in other_videos_with_same_file:
                                other_task = other_video.bulk_task
                                if other_task.status in ['RUNNING', 'PENDING']:
                                    return False, f'[BLOCK] File {filename} is still used by running task "{other_task.name}" (ID: {other_task.id})'
                            
                            return True, None
                        
                        is_safe, warning_msg = is_file_safe_to_delete()
                        
                        if is_safe:
                            filename = os.path.basename(file_path)
                            os.unlink(file_path)
                            deleted_count += 1
                            print(f"  [DELETE] –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {filename}")
                        else:
                            print(f"  [PAUSE] –ü—Ä–æ–ø—É—â–µ–Ω —Ñ–∞–π–ª (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏): {os.path.basename(file_path)}")
                            if warning_msg:
                                print(f"  [WARN] {warning_msg}")
                        
                except Exception as e:
                    print(f"  [FAIL] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {video.id}: {str(e)}")
    
    return deleted_count

def show_statistics():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ–∞–π–ª–æ–≤"""
    media_dir = Path("media/bot/bulk_videos")
    
    if not media_dir.exists():
        print("[FOLDER] –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è media/bot/bulk_videos –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return
    
    files = list(media_dir.glob("*.mp4"))
    total_size = sum(f.stat().st_size for f in files)
    
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ media/bot/bulk_videos:")
    print(f"   [FOLDER] –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(files)}")
    print(f"   üíæ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_size / (1024*1024):.1f} MB")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–¥–∞—á–∞–º
    total_tasks = BulkUploadTask.objects.count()
    completed_tasks = BulkUploadTask.objects.filter(status='COMPLETED').count()
    failed_tasks = BulkUploadTask.objects.filter(status='FAILED').count()
    
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á:")
    print(f"   [CLIPBOARD] –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {total_tasks}")
    print(f"   [OK] –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: {completed_tasks}")
    print(f"   [FAIL] –ù–µ—É–¥–∞—á–Ω—ã—Ö: {failed_tasks}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–∏–¥–µ–æ –≤ –ë–î
    total_videos = BulkVideo.objects.count()
    print(f"   [VIDEO] –í—Å–µ–≥–æ –≤–∏–¥–µ–æ –≤ –ë–î: {total_videos}")

def main():
    import argparse
    
    parser = argparse.ArgumentParser(description="Cleanup media files with safety checks for running tasks")
    parser.add_argument('--orphaned', action='store_true', help='Cleanup orphaned files (files without database records)')
    parser.add_argument('--old-tasks', type=int, metavar='DAYS', help='Cleanup files from completed tasks older than N days')
    parser.add_argument('--stats', action='store_true', help='Show file and task statistics')
    parser.add_argument('--all', action='store_true', help='Run all cleanup operations')
    
    args = parser.parse_args()
    
    if not any([args.orphaned, args.old_tasks, args.stats, args.all]):
        parser.print_help()
        print("\n" + "="*60)
        print("üí° –í–ê–ñ–ù–û: –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ—á–∏—Å—Ç–∫–∏ –≤–∫–ª—é—á–∞—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!")
        print("   ‚Ä¢ –§–∞–π–ª—ã –ù–ï —É–¥–∞–ª—è—é—Ç—Å—è, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏")
        print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á: RUNNING –∏ PENDING")
        print("   ‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã")
        print("="*60)
        return
    
    print("[CLEAN] –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Ñ–∞–π–ª–æ–≤ media/bot/bulk_videos/")
    print("=" * 60)
    
    if args.stats or args.all:
        show_statistics()
        print("-" * 60)
    
    total_deleted = 0
    
    if args.orphaned or args.all:
        print("[DELETE] –û—á–∏—Å—Ç–∫–∞ orphaned —Ñ–∞–π–ª–æ–≤...")
        deleted = cleanup_orphaned_files()
        total_deleted += deleted
        print(f"[OK] –£–¥–∞–ª–µ–Ω–æ orphaned —Ñ–∞–π–ª–æ–≤: {deleted}")
        print("-" * 60)
    
    if args.old_tasks or args.all:
        days = args.old_tasks if args.old_tasks else 7
        print(f"[DELETE] –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –∑–∞–¥–∞—á —Å—Ç–∞—Ä—à–µ {days} –¥–Ω–µ–π...")
        deleted = cleanup_completed_tasks_files(days)
        total_deleted += deleted
        print(f"[OK] –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞—á: {deleted}")
        print("-" * 60)
    
    print(f"[PARTY] –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—Å–µ–≥–æ —É–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {total_deleted}")
    
    if total_deleted > 0:
        print("\nüìä –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        show_statistics()

if __name__ == "__main__":
    main() 