
import requests
import json
import logging
from datetime import datetime
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è - –ø–∏—à–µ–º –≤ django.log
import os
project_root = os.path.dirname(os.path.abspath(__file__))
django_log_path = os.path.join(project_root, 'django.log')

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler(django_log_path, encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)

HIKER_API_KEY = "w0xxjcp8m2dym58s6lyzyraqjddhwel9"

async def analyze_hashtag_full(hashtag_name: str) -> dict:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –í–°–ï –≤–∏–¥–µ–æ —Ö—ç—à—Ç–µ–≥–∞ –±—ã—Å—Ç—Ä–æ"""
    headers = {
        'accept': 'application/json',
        'x-access-key': HIKER_API_KEY
    }
    
    try:
        print(f"üîç –ê–Ω–∞–ª–∏–∑ —Ö—ç—à—Ç–µ–≥–∞: #{hashtag_name}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö—ç—à—Ç–µ–≥–µ
        hashtag_info_url = f"https://api.hikerapi.com/v1/hashtag/by/name?name={hashtag_name}"
        response = requests.get(hashtag_info_url, headers=headers, timeout=30)
        
        if response.status_code == 402:
            return {"error": "üí≥ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ HikerAPI. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ https://hikerapi.com/billing"}
        elif response.status_code != 200:
            return {"error": f"–û—à–∏–±–∫–∞ API: {response.status_code}"}
        
        hashtag_data = response.json()
        media_count = hashtag_data.get('media_count', 0)
        print(f"üìπ –í—Å–µ–≥–æ –≤–∏–¥–µ–æ: {media_count}")
        
        if media_count == 0:
            return {"error": "–•—ç—à—Ç–µ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∏–¥–µ–æ"}
        
        # –°–æ–±–∏—Ä–∞–µ–º –í–°–ï –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ –ø–∞–≥–∏–Ω–∞—Ü–∏—é
        all_videos = []
        next_page_id = None
        page = 1
        
        while len(all_videos) < media_count:
            # –§–æ—Ä–º–∏—Ä—É–µ–º URL
            if next_page_id:
                clips_url = f"https://api.hikerapi.com/v2/hashtag/medias/clips?name={hashtag_name}&page_id={next_page_id}"
            else:
                clips_url = f"https://api.hikerapi.com/v2/hashtag/medias/clips?name={hashtag_name}"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç–æ–ª—å–∫–æ –∫–∞–∂–¥—ã–µ 5 —Å—Ç—Ä–∞–Ω–∏—Ü
            if page % 5 == 1:
                print(f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}: {len(all_videos)}/{media_count}")
            
            response = requests.get(clips_url, headers=headers, timeout=60)
            
            if response.status_code != 200:
                break
            
            chunk_data = response.json()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–∏–¥–µ–æ –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
            videos = []
            next_page_id = None
            
            if isinstance(chunk_data, dict) and 'response' in chunk_data:
                response_data = chunk_data['response']
                
                # –ë—ã—Å—Ç—Ä–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–∏–¥–µ–æ –∏–∑ —Å–µ–∫—Ü–∏–π
                sections = response_data.get('sections', [])
                
                # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–µ–∫—Ü–∏–π (—Ç–æ–ª—å–∫–æ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ)
                if page == 1:
                    section_types = [s.get('layout_type', 'unknown') for s in sections]
                    print(f"üîç –¢–∏–ø—ã —Å–µ–∫—Ü–∏–π: {section_types}")
                
                for section in sections:
                    layout_content = section.get('layout_content', {})
                    section_videos = []
                    
                    # –î–ª—è media_grid - —Å–∞–º—ã–π —á–∞—Å—Ç—ã–π —Ç–∏–ø
                    if 'medias' in layout_content:
                        medias = layout_content['medias']
                        for item in medias:
                            media = item.get('media')
                            if media and 'play_count' in media:
                                section_videos.append(media)
                        videos.extend(section_videos)
                    
                    # –î–ª—è clips —Å–µ–∫—Ü–∏–π
                    elif 'one_by_two_item' in layout_content:
                        clips = layout_content['one_by_two_item'].get('clips', {})
                        # items
                        items = clips.get('items', [])
                        for item in items:
                            media = item.get('media')
                            if media and 'play_count' in media:
                                section_videos.append(media)
                        # fill_items
                        fill_items = clips.get('fill_items', [])
                        for item in fill_items:
                            media = item.get('media')
                            if media and 'play_count' in media:
                                section_videos.append(media)
                        videos.extend(section_videos)
                        if page <= 2:  # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–µ—Ä–≤—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
                            print(f"   üé¨ one_by_two_item: {len(items)} items + {len(fill_items)} fill_items = {len(section_videos)} —Å play_count")
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–∏–ø—ã —Å–µ–∫—Ü–∏–π
                    elif 'clips' in layout_content:
                        clips = layout_content['clips']
                        # items
                        items = clips.get('items', [])
                        for item in items:
                            media = item.get('media')
                            if media and 'play_count' in media:
                                section_videos.append(media)
                        # fill_items  
                        fill_items = clips.get('fill_items', [])
                        for item in fill_items:
                            media = item.get('media')
                            if media and 'play_count' in media:
                                section_videos.append(media)
                        videos.extend(section_videos)
                    
                    # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ç–∏–ø—ã —Å–µ–∫—Ü–∏–π
                    else:
                        if page <= 2:
                            available_keys = list(layout_content.keys())
                            print(f"   ‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å–µ–∫—Ü–∏—è —Å –∫–ª—é—á–∞–º–∏: {available_keys}")
                
                if page <= 2:  # –û–±—â–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–µ—Ä–≤—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
                    print(f"   ‚û°Ô∏è –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page}: {len(videos)} –≤–∏–¥–µ–æ")
                
                # –ü–æ–ª—É—á–∞–µ–º next_page_id
                next_page_id = response_data.get('next_page_id')
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º next_page_id –Ω–∞ –∫–æ—Ä–Ω–µ–≤–æ–º —É—Ä–æ–≤–Ω–µ
                if not next_page_id and 'next_page_id' in chunk_data:
                    next_page_id = chunk_data.get('next_page_id')
            
            if not videos:
                print(f"‚ùå –û—Å—Ç–∞–Ω–æ–≤–∫–∞: –Ω–µ—Ç –≤–∏–¥–µ–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page}")
                break
            
            all_videos.extend(videos)
            page += 1
            
            # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            if not next_page_id:
                print(f"‚ùå –û—Å—Ç–∞–Ω–æ–≤–∫–∞: –Ω–µ—Ç next_page_id –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page-1}")
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º more_available —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                if isinstance(chunk_data, dict) and 'response' in chunk_data:
                    more_available = chunk_data['response'].get('more_available')
                    print(f"üìä more_available: {more_available}")
                break
            
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º more_available –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∫–∞ –µ—Å—Ç—å next_page_id
            # –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ—Å—Ç–∞–µ—Ç—Å—è
            if page > 50:
                print(f"‚ùå –û—Å—Ç–∞–Ω–æ–≤–∫–∞: –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç 50 —Å—Ç—Ä–∞–Ω–∏—Ü")
                break
        
        # –ë—ã—Å—Ç—Ä—ã–π –ø–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–µ–∑ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        total_play_count = sum(
            int(video.get('play_count', 0)) 
            for video in all_videos 
            if isinstance(video, dict) and isinstance(video.get('play_count'), (int, float))
        )
        analyzed_videos = sum(
            1 for video in all_videos 
            if isinstance(video, dict) and isinstance(video.get('play_count'), (int, float))
        )
        
        print(f"üì• {len(all_videos)} –≤–∏–¥–µ–æ, üëÄ {total_play_count:,} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤")
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        summary = {
            "hashtag_name": hashtag_name,
            "timestamp": datetime.now().isoformat(),
            "total_videos": media_count,
            "fetched_videos": len(all_videos),
            "analyzed_videos": analyzed_videos,
            "videos_without_play_count": len(all_videos) - analyzed_videos,
            "total_views": total_play_count,
            "average_views": total_play_count / analyzed_videos if analyzed_videos > 0 else 0,
            "pages_loaded": page - 1
        }
        
        return summary
        
    except requests.exceptions.Timeout:
        return {"error": "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç API"}
    except requests.exceptions.RequestException as e:
        return {"error": f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {str(e)}"}
    except Exception as e:
        return {"error": f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    await update.message.reply_text(
        "üé¨ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ö—ç—à—Ç–µ–≥–æ–≤ Instagram.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ö—ç—à—Ç–µ–≥–∞ (–±–µ–∑ #) –∏ —è:\n"
        "‚Ä¢ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –í–°–ï –≤–∏–¥–µ–æ\n"
        "‚Ä¢ –ü–æ–¥—Å—á–∏—Ç–∞—é –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤\n"
        "‚Ä¢ –ü–æ–∫–∞–∂—É –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n\n"
        "–ü—Ä–∏–º–µ—Ä: caspin14"
    )

async def handle_hashtag(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ö—ç—à—Ç–µ–≥–∞–º–∏"""
    hashtag_name = update.message.text.strip()
    
    if hashtag_name.startswith('#'):
        hashtag_name = hashtag_name[1:]
    
    if not hashtag_name:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ö—ç—à—Ç–µ–≥–∞")
        return
    
    status_message = await update.message.reply_text(
        f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ö—ç—à—Ç–µ–≥ #{hashtag_name}...\n"
        f"–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
    )
    
    result = await analyze_hashtag_full(hashtag_name)
    
    if "error" in result:
        await status_message.edit_text(f"‚ùå {result['error']}")
        return
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    coverage_percent = (result['analyzed_videos'] / result['total_videos']) * 100 if result['total_videos'] > 0 else 0
    
    response_text = f"""
üìä –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –•–≠–®–¢–ï–ì–ê #{result['hashtag_name']}

üìπ –í—Å–µ–≥–æ –≤–∏–¥–µ–æ: {result['total_videos']:,}
üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {result['fetched_videos']:,}
üîç –° –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {result['analyzed_videos']:,}
‚ùå –ë–µ–∑ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {result['videos_without_play_count']:,}
üìÑ –°—Ç—Ä–∞–Ω–∏—Ü –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {result['pages_loaded']}

üëÄ –û–±—â–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: {result['total_views']:,}
üìà –°—Ä–µ–¥–Ω–µ–µ –Ω–∞ –≤–∏–¥–µ–æ: {result['average_views']:,.0f}

üìä –ü–æ–∫—Ä—ã—Ç–∏–µ: {coverage_percent:.1f}%

{"‚úÖ –í—Å–µ –≤–∏–¥–µ–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!" if result['fetched_videos'] >= result['total_videos'] else f"‚ö†Ô∏è –ó–∞–≥—Ä—É–∂–µ–Ω–æ {result['fetched_videos']} –∏–∑ {result['total_videos']} –≤–∏–¥–µ–æ"}
"""
    
    await status_message.edit_text(response_text)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    help_text = """
ü§ñ –ë–û–¢ –î–õ–Ø –ë–´–°–¢–†–û–ì–û –ê–ù–ê–õ–ò–ó–ê –•–≠–®–¢–ï–ì–û–í INSTAGRAM

–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
‚úÖ –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –≤–∏–¥–µ–æ —Ö—ç—à—Ç–µ–≥–∞
‚úÖ –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
‚úÖ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚úÖ –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ –ø–∞–≥–∏–Ω–∞—Ü–∏—é

–ö–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ö—ç—à—Ç–µ–≥–∞ –±–µ–∑ # –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.
"""
    
    await update.message.reply_text(help_text)

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"Update {update} caused error {context.error}")
    
    if update and update.message:
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏."
        )

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    BOT_TOKEN = "8037834166:AAER_S3xYbuwzhlN0EZZ7GVjkrWm1a1TxfU"
    
    application = Application.builder().token(BOT_TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_hashtag))
    application.add_error_handler(error_handler)
    
    print("ü§ñ –ë—ã—Å—Ç—Ä—ã–π –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ö—ç—à—Ç–µ–≥–æ–≤ –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
