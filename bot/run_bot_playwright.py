#!/usr/bin/env python
import os
import sys
import json
import argparse
import logging
import time
import re
import shutil
import random
import string
import uuid
from pathlib import Path
from datetime import datetime
from PIL import Image, ExifTags
import subprocess
import traceback
from dotenv import load_dotenv

# Suppress verbose Playwright logging before any imports
os.environ['PLAYWRIGHT_QUIET'] = '1'
os.environ['PLAYWRIGHT_DISABLE_COLORS'] = '1'
os.environ['DEBUG'] = ''
os.environ['PLAYWRIGHT_SKIP_VALIDATE_HOST_REQUIREMENTS'] = '1'

# Configure logging to suppress verbose Playwright logs
logging.getLogger('playwright').setLevel(logging.CRITICAL)
logging.getLogger('playwright._impl').setLevel(logging.CRITICAL)
logging.getLogger('playwright.sync_api').setLevel(logging.CRITICAL)

# Load environment variables from .env file
load_dotenv()

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –º–æ–¥—É–ª–∏ Dolphin Anty –≤–º–µ—Å—Ç–æ —Å—Ç–∞—Ä—ã—Ö
from bot.src.instagram_uploader.browser_dolphin import get_browser, get_page, close_browser
from bot.src.instagram_uploader.dolphin_anty import DolphinAnty
from bot.src.instagram_uploader.auth_playwright import Auth, verify_ip_address
from bot.src.instagram_uploader.upload_playwright import Upload
from bot.src import logger
from bot.src.videos import get_videos_list, get_videos_by_folders
from bot.src.instagram_uploader.util import random_delay, realistic_type, human_action

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# Get the project root directory for django.log
project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
django_log_path = os.path.join(project_root, 'django.log')

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),  # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
        logging.FileHandler(django_log_path, encoding='utf-8')  # –í—ã–≤–æ–¥ –≤ django.log
    ]
)
logger = logging.getLogger(__name__)

def check_proxy_config(proxy_data):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–æ–∫—Å–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º IP
    """
    if not proxy_data:
        logger.error("[FAIL] –ü—Ä–æ–∫—Å–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –Ω–æ –æ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞")
        return None
        
    logger.info("[RETRY] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∫—Å–∏...")
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å Dolphin –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∫—Å–∏
    api_key = os.environ.get("DOLPHIN_API_TOKEN", "")
    if not api_key:
        logger.error("[FAIL] Dolphin API token not found in environment variables")
        return None
    
    dolphin = DolphinAnty(api_key=api_key)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å —Å –ø—Ä–æ–∫—Å–∏
        temp_profile_name = f"Temp Profile - {uuid.uuid4().hex[:8]}"
        proxy_payload = {
            'type': proxy_data.get('type', 'http'),
            'host': proxy_data.get('host'),
            'port': proxy_data.get('port'),
            'user': proxy_data.get('username', ''),
            'pass': proxy_data.get('password', '')
        }
        
        profile_response = dolphin.create_profile(
            name=temp_profile_name,
            proxy=proxy_payload,
            tags=["temp"],
            locale='ru_RU'
        )
        if not profile_response or not profile_response.get("success"):
            logger.error("[FAIL] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∫—Å–∏")
            return None
            
        profile_id = profile_response.get("browserProfileId")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        logger.info("[RETRY] –ó–∞–ø—É—Å–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∫—Å–∏...")
        success, automation_data = dolphin.start_profile(profile_id, headless=True)
        
        if not success:
            logger.error("[FAIL] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å")
            dolphin.delete_profile(profile_id)
            return None
            
        # –°–æ–∑–¥–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
        browser = get_browser(headless=True, profile_id=profile_id)
        page = get_page(browser)
        
        if not page:
            logger.error("[FAIL] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –±—Ä–∞—É–∑–µ—Ä–∞")
            close_browser(browser)
            dolphin.delete_profile(profile_id)
            return None
        
        logger.info("üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–∫—Å–∏...")
        ip = verify_ip_address(page)
        if ip:
            logger.info(f"[OK] –ü—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π IP-–∞–¥—Ä–µ—Å: {ip}")
            result = ip
        else:
            logger.error("[FAIL] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å IP-–∞–¥—Ä–µ—Å –∏–ª–∏ –ø—Ä–æ–∫—Å–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            result = None
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
        if 'browser' in locals():
            logger.info("üîí –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞...")
            close_browser(browser)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        if 'profile_id' in locals():
            logger.info("[DELETE] –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è...")
            dolphin.delete_profile(profile_id)
        
    return result

def prepare_video_for_upload(video_path):
    """
    –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏:
    - –ö–æ–ø–∏—Ä—É–µ—Ç –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é —Å —á–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω—ã–º –∏–º–µ–Ω–µ–º
    - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
    """
    try:
        logger.info(f"[RETRY] –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤–∏–¥–µ–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏: {video_path}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
        if not os.path.exists(video_path):
            logger.error(f"[FAIL] –í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {video_path}")
            return None
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        prepared_dir = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), "prepared_videos")
        os.makedirs(prepared_dir, exist_ok=True)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —á–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        current_date = datetime.now().strftime("%Y%m%d")
        
        # –ë–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤
        human_prefixes = ["video", "clip", "moment", "insta", "story", "reel", "memory", "capture", "shot"]
        human_names = [
            "vacation", "friends", "family", "party", "trip", "beach", "fun", 
            "memories", "moments", "sunset", "weekend", "birthday", "holiday",
            "summer", "winter", "spring", "autumn", "concert", "wedding",
            "graduation", "celebration", "adventure", "travel", "food", "pet"
        ]
        human_suffixes = ["edit", "final", "share", "post", "upload", "cut", "trim", "export"]
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        random_prefix = random.choice(human_prefixes)
        random_name = random.choice(human_names)
        
        # –° –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 50% –¥–æ–±–∞–≤–ª—è–µ–º —Å—É—Ñ—Ñ–∏–∫—Å
        if random.random() > 0.5:
            random_suffix = random.choice(human_suffixes)
            base_name = f"{random_prefix}_{random_name}_{random_suffix}"
        else:
            base_name = f"{random_prefix}_{random_name}"
        
        # –° –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 70% –¥–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É
        if random.random() > 0.3:
            # –í—ã–±–∏—Ä–∞–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
            date_formats = [
                current_date,  # YYYYMMDD
                datetime.now().strftime("%d%m%Y"),  # DDMMYYYY
                datetime.now().strftime("%m%d"),  # MMDD
                datetime.now().strftime("%Y_%m_%d"),  # YYYY_MM_DD
                datetime.now().strftime("%d_%m_%Y"),  # DD_MM_YYYY
            ]
            date_str = random.choice(date_formats)
            base_name = f"{base_name}_{date_str}"
        
        # –° –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 30% –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Ü–∏—Ñ—Ä—ã
        if random.random() > 0.7:
            random_digits = ''.join(random.choices(string.digits, k=random.randint(2, 4)))
            base_name = f"{base_name}_{random_digits}"
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        file_ext = os.path.splitext(video_path)[1]
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        new_filename = f"{base_name}{file_ext}"
        new_path = os.path.join(prepared_dir, new_filename)
        
        logger.info(f"[RETRY] –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –∏–∑ {video_path} –≤ {new_path}")
        
        # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
        shutil.copy2(video_path, new_path)
        logger.info(f"[OK] –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ —Å –Ω–æ–≤—ã–º –∏–º–µ–Ω–µ–º: {new_filename}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
        random_delay(1, 3)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ
        if random.random() > 0.5:
            logger.info(f"[RETRY] –ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ –¥–ª—è –±–æ–ª—å—à–µ–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏...")
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º exiftool –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
                if shutil.which('exiftool'):
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 7 –¥–Ω–µ–π
                    days_ago = random.randint(0, 7)
                    hours_ago = random.randint(0, 23)
                    minutes_ago = random.randint(0, 59)
                    
                    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è
                    cmd = [
                        'exiftool',
                        f'-CreateDate-={days_ago}:0:0 {hours_ago}:{minutes_ago}:0',
                        f'-ModifyDate-={days_ago}:0:0 {hours_ago}:{minutes_ago}:0',
                        new_path
                    ]
                    
                    # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
                    subprocess.run(cmd, capture_output=True, text=True)
                    logger.info(f"[OK] –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã")
                else:
                    logger.info(f"‚ÑπÔ∏è exiftool –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö")
            except Exception as e:
                logger.info(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {str(e)}")
        
        return new_path
    except Exception as e:
        logger.error(f"[FAIL] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")
        return None

def main():
    logger.info("[START] –ó–∞–ø—É—Å–∫ Instagram Uploader Bot (Playwright + Dolphin Anty)")
    
    parser = argparse.ArgumentParser(description='Instagram Uploader Bot')
    parser.add_argument('--account', required=True, help='Path to account data JSON file')
    parser.add_argument('--videos', required=True, help='Path to videos list JSON file')
    parser.add_argument('--proxy', help='Path to proxy data JSON file')
    parser.add_argument('--non-interactive', action='store_true', help='Run in non-interactive mode (no user prompts)')
    parser.add_argument('--visible', action='store_true', help='Force browser to run in visible mode')
    parser.add_argument('--dolphin-token', help='Dolphin Anty API token')
    args = parser.parse_args()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä –≤ –≤–∏–¥–∏–º–æ–º —Ä–µ–∂–∏–º–µ
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: 1) –∞—Ä–≥—É–º–µ–Ω—Ç --visible, 2) –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è HEADLESS=0, 3) –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è VISIBLE=1
    headless_mode = True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Å–∫—Ä—ã—Ç—ã–π —Ä–µ–∂–∏–º
    
    if args.visible:
        headless_mode = False
        logger.info("‚ÑπÔ∏è –ë—Ä–∞—É–∑–µ—Ä –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω –≤ –≤–∏–¥–∏–º–æ–º —Ä–µ–∂–∏–º–µ (—É–∫–∞–∑–∞–Ω –∞—Ä–≥—É–º–µ–Ω—Ç --visible)")
    elif os.environ.get("HEADLESS", "1") == "0":
        headless_mode = False
        logger.info("‚ÑπÔ∏è –ë—Ä–∞—É–∑–µ—Ä –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω –≤ –≤–∏–¥–∏–º–æ–º —Ä–µ–∂–∏–º–µ (HEADLESS=0)")
    elif os.environ.get("VISIBLE", "0") == "1":
        headless_mode = False
        logger.info("‚ÑπÔ∏è –ë—Ä–∞—É–∑–µ—Ä –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω –≤ –≤–∏–¥–∏–º–æ–º —Ä–µ–∂–∏–º–µ (VISIBLE=1)")
    else:
        logger.info("‚ÑπÔ∏è –ë—Ä–∞—É–∑–µ—Ä –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Å–∫—Ä—ã—Ç–æ–º —Ä–µ–∂–∏–º–µ (headless)")
    
    # –ü–æ–ª—É—á–∞–µ–º API —Ç–æ–∫–µ–Ω Dolphin Anty
    dolphin_token = args.dolphin_token or os.environ.get("DOLPHIN_API_TOKEN")
    if not dolphin_token:
        logger.warning("[WARN] API —Ç–æ–∫–µ–Ω Dolphin Anty –Ω–µ —É–∫–∞–∑–∞–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --dolphin-token –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è DOLPHIN_API_TOKEN")
    
    logger.info(f"[CLIPBOARD] –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞: account={args.account}, videos={args.videos}, proxy={args.proxy if args.proxy else '–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è'}, non-interactive={args.non_interactive}, visible={not headless_mode}")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º browser –∫–∞–∫ None –ø–µ—Ä–µ–¥ try-–±–ª–æ–∫–æ–º
    browser = None

    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞
        logger.info(f"üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞: {args.account}")
        try:
            with open(args.account, 'r') as f:
                account_data = json.load(f)
            logger.info(f"[OK] –î–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {account_data.get('username')}")
        except Exception as e:
            logger.error(f"[FAIL] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞: {str(e)}")
            return 1
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–∫—Å–∏ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã)
        proxy_data = None
        if args.proxy:
            logger.info(f"[RETRY] –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏ –∏–∑ —Ñ–∞–π–ª–∞: {args.proxy}")
            try:
                with open(args.proxy, 'r') as f:
                    proxy_data = json.load(f)
                logger.info(f"[OK] –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–∫—Å–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {proxy_data.get('host')}:{proxy_data.get('port')}")
            except Exception as e:
                logger.error(f"[FAIL] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏: {str(e)}")
                return 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–æ–∫—Å–∏ (–µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω)
        if proxy_data:
            ip_info = check_proxy_config(proxy_data)
            if not ip_info and not args.non_interactive:
                user_answer = input("–ü—Ä–æ–∫—Å–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –ø—Ä–æ–∫—Å–∏? (y/n): ")
                if user_answer.lower() != 'y':
                    logger.error("[FAIL] –í—ã—Ö–æ–¥ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                    return 1
                proxy_data = None  # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–∫—Å–∏
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ
        logger.info(f"[RETRY] –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –≤–∏–¥–µ–æ –∏–∑ —Ñ–∞–π–ª–∞: {args.videos}")
        try:
            with open(args.videos, 'r') as f:
                video_paths = json.load(f)
            logger.info(f"[OK] –°–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω, –Ω–∞–π–¥–µ–Ω–æ {len(video_paths)} –≤–∏–¥–µ–æ")
        except Exception as e:
            logger.error(f"[FAIL] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –≤–∏–¥–µ–æ: {str(e)}")
            return 1

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –∞–∫–∫–∞—É–Ω—Ç–∞ —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å Dolphin
        dolphin_profile_id = account_data.get('dolphin_profile_id')
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±—Ä–∞—É–∑–µ—Ä
        logger.info("[RETRY] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ —Å Dolphin Anty...")
        
        if dolphin_profile_id:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
            logger.info(f"[SEARCH] –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å Dolphin: {dolphin_profile_id}")
            browser = get_browser(
                headless=headless_mode, 
                api_token=dolphin_token, 
                profile_id=dolphin_profile_id
            )
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞
            logger.info(f"[TOOL] –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å Dolphin –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_data.get('username')}")
            browser = get_browser(
                headless=headless_mode, 
                proxy=proxy_data, 
                api_token=dolphin_token, 
                account_data=account_data
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞
            if browser and hasattr(browser, 'dolphin_profile_id') and browser.dolphin_profile_id:
                dolphin_profile_id = browser.dolphin_profile_id
                account_data['dolphin_profile_id'] = dolphin_profile_id
                logger.info(f"[OK] –ü—Ä–æ—Ñ–∏–ª—å Dolphin {dolphin_profile_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–∞–π–ª
                try:
                    with open(args.account, 'w') as f:
                        json.dump(account_data, f, indent=2)
                    logger.info("[OK] –î–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã —Å ID –ø—Ä–æ—Ñ–∏–ª—è Dolphin")
                except Exception as e:
                    logger.error(f"[FAIL] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞: {str(e)}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º snapshot –ø—Ä–æ—Ñ–∏–ª—è –≤ –ë–î –µ—Å–ª–∏ –µ—Å—Ç—å account_id –∏ response
                if account_data.get('account_id') and hasattr(browser, 'dolphin_profile_response'):
                    try:
                        # Import Django settings
                        import django
                        import sys
                        import os
                        sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
                        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'instagram_uploader.settings')
                        django.setup()
                        
                        from uploader.models import InstagramAccount
                        from uploader.services.dolphin_snapshot import save_dolphin_snapshot
                        
                        account = InstagramAccount.objects.filter(id=account_data['account_id']).first()
                        if account:
                            save_dolphin_snapshot(account, dolphin_profile_id, browser.dolphin_profile_response)
                            logger.info(f"[OK] Dolphin profile snapshot saved to database for account {account.username}")
                    except Exception as snap_err:
                        logger.warning(f"[WARN] Could not save Dolphin snapshot to database: {str(snap_err)}")
        
        if not browser:
            logger.error("[FAIL] –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä")
            return 1
            
        logger.info("[RETRY] –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±—Ä–∞—É–∑–µ—Ä–∞...")
        page = get_page(browser)
        if not page:
            logger.error("[FAIL] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –±—Ä–∞—É–∑–µ—Ä–∞")
            close_browser(browser)
            return 1
            
        logger.info("[OK] –ë—Ä–∞—É–∑–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        random_delay(2, 4)  # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞

        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        logger.info(f"üîë –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_data['username']}...")
        auth = Auth(page, account_data)
        
        # –ï—Å–ª–∏ –≤ account_data –µ—Å—Ç—å account_id, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∫ –æ–±—ä–µ–∫—Ç—É Auth
        if 'account_id' in account_data:
            auth.account_id = account_data['account_id']
            logger.info(f"üÜî –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –∞–∫–∫–∞—É–Ω—Ç–∞: {account_data['account_id']}")
        
        logger.info("[WAIT] –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Ö–æ–¥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç...")
        if not auth.login_with_tfa():
            logger.error("[FAIL] –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏! –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç.")
            logger.info("üîí –ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞...")
            close_browser(browser)
            return
        
        logger.info("[OK] –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
        random_delay(3, 5)  # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏

        # –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ
        uploader = Upload(page)
        logger.info(f"üì§ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ {len(video_paths)} –≤–∏–¥–µ–æ...")
        
        prepared_videos = []
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –≤–∏–¥–µ–æ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
        logger.info("[RETRY] –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤–∏–¥–µ–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏...")
        for video_path in video_paths:
            prepared_path = prepare_video_for_upload(video_path)
            if prepared_path:
                prepared_videos.append(prepared_path)
        
        if not prepared_videos:
            logger.error("[FAIL] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
            logger.info("üîí –ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞...")
            close_browser(browser)
            return
            
        logger.info(f"[OK] –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(prepared_videos)} –≤–∏–¥–µ–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
        
        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –ø–æ—Ä—è–¥–æ–∫ –≤–∏–¥–µ–æ –¥–ª—è –±–æ–ª—å—à–µ–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ (—Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 30%)
        if random.random() > 0.7 and len(prepared_videos) > 1:
            logger.info("[RETRY] –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ –¥–ª—è –±–æ–ª—å—à–µ–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏...")
            random.shuffle(prepared_videos)
        
        for i, video_path in enumerate(prepared_videos):
            logger.info(f"[VIDEO] –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ {i+1}/{len(prepared_videos)}: {video_path}")
            logger.info("[WAIT] –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
            random_delay(3, 8)
            
            # –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–µ–Ω—Ç—ã –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π (—Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 40%)
            if random.random() > 0.6:
                browse_time = random.randint(15, 45)
                logger.info(f"[SEARCH] –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–µ–Ω—Ç—ã Instagram –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –≤–∏–¥–µ–æ ({browse_time} —Å–µ–∫—É–Ω–¥)...")
                try:
                    # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –ª–µ–Ω—Ç—ã
                    for _ in range(random.randint(3, 8)):
                        # –°–ª—É—á–∞–π–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑
                        page.mouse.wheel(0, random.randint(300, 800))
                        random_delay(1, 3)
                        
                        # –°–ª—É—á–∞–π–Ω—ã–µ –ª–∞–π–∫–∏ (—Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 20%)
                        if random.random() > 0.8:
                            logger.info("üëç –ò–º–∏—Ç–∞—Ü–∏—è –ª–∞–π–∫–∞ –ø–æ—Å—Ç–∞...")
                            # –ò—â–µ–º –∫–Ω–æ–ø–∫–∏ –ª–∞–π–∫–æ–≤ (–Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é)
                            try:
                                like_button = page.locator("svg[aria-label='Like']").first
                                if like_button and like_button.is_visible():
                                    like_button.click()
                                    logger.info("‚ù§Ô∏è –õ–∞–π–∫ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω")
                                    random_delay(1, 3)
                            except Exception as e:
                                logger.info(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫: {str(e)}")
                    
                    # –ü–æ—Å–µ—â–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è (—Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 30%)
                    if random.random() > 0.7:
                        logger.info("üë§ –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ—Å–µ—â–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è...")
                        try:
                            # –ò—â–µ–º –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ª–µ–Ω—Ç–µ (–Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é)
                            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –∫–ª–∏–∫–∞ –ø–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            random_delay(3, 8)
                            page.goto("https://www.instagram.com/")
                            logger.info("üîô –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É")
                            random_delay(1, 3)
                        except Exception as e:
                            logger.info(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å–µ—Ç–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å: {str(e)}")
                except Exception as e:
                    logger.info(f"[WARN] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–∏—Ç–∞—Ü–∏–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–µ–Ω—Ç—ã: {str(e)}")
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
                    page.goto("https://www.instagram.com/")
                    random_delay(1, 3)
                
                logger.info("[OK] –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–µ–Ω—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ
            upload_success = uploader.upload_video(video_path)
            if upload_success:
                logger.info(f"[OK] –í–∏–¥–µ–æ {i+1}/{len(prepared_videos)} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!")
            else:
                logger.error(f"[FAIL] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ {i+1}/{len(prepared_videos)}")
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–≥—Ä—É–∑–∫–∞–º–∏ –≤–∏–¥–µ–æ —Å –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å—é
            if i < len(prepared_videos) - 1:  # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤–∏–¥–µ–æ
                # –ë–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –∑–∞–≥—Ä—É–∑–∫–∞–º–∏
                if random.random() > 0.7:
                    # –î–ª–∏–Ω–Ω–∞—è –ø–∞—É–∑–∞ (–∏–º–∏—Ç–∞—Ü–∏—è –ø–µ—Ä–µ—Ä—ã–≤–∞)
                    delay = random.randint(60, 180)  # –û—Ç 1 –¥–æ 3 –º–∏–Ω—É—Ç
                    logger.info(f"[WAIT] –î–ª–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–≥—Ä—É–∑–∫–∞–º–∏: {delay} —Å–µ–∫—É–Ω–¥...")
                    time.sleep(delay)
                else:
                    # –û–±—ã—á–Ω–∞—è –ø–∞—É–∑–∞
                    delay = random.randint(30, 60)  # –û—Ç 30 —Å–µ–∫—É–Ω–¥ –¥–æ 1 –º–∏–Ω—É—Ç—ã
                    logger.info(f"[WAIT] –û–∂–∏–¥–∞–Ω–∏–µ {delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–∏–¥–µ–æ...")
                    time.sleep(delay)

        logger.info("[OK] –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")

    except Exception as e:
        logger.error(f"[FAIL] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        logger.error(traceback.format_exc())
    finally:
        logger.info("üîí –ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞...")
        close_browser(browser)
        logger.info("üëã –†–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

if __name__ == "__main__":
    main() 