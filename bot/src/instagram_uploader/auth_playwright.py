import json
import os
from time import sleep
import time
import logging
import re

from playwright.sync_api import expect

from bot.src.instagram_uploader import config
from bot.src.instagram_uploader.browser_dolphin import get_browser, get_page, close_browser
from bot.src.instagram_uploader.email_client import Email
from .tfa_api import TFAAPI
from bot.src.instagram_uploader.util import random_delay, realistic_type, human_action

logger = logging.getLogger('bot.instagram_uploader.auth')

def verify_ip_address(page):
    """
    Verify the current IP address by visiting an IP checking service
    """
    try:
        logger.info("[SEARCH] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ IP-–∞–¥—Ä–µ—Å–∞...")
        page.goto("https://api.ipify.org")
        ip_text = page.content()
        
        # For ipify.org, the IP is the entire body content
        body_text = page.inner_text("body")
        if re.match(r"\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}", body_text):
            ip = body_text
            logger.info(f"[OK] –¢–µ–∫—É—â–∏–π IP-–∞–¥—Ä–µ—Å: {ip}")
            return ip
            
        # Fallback to regex extraction from full content
        ip_match = re.search(r"\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}", ip_text)
        if ip_match:
            ip = ip_match.group(0)
            logger.info(f"[OK] –¢–µ–∫—É—â–∏–π IP-–∞–¥—Ä–µ—Å: {ip}")
            return ip
        else:
            # Try alternative IP checking service
            logger.info("[RETRY] –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ IP...")
            page.goto("https://checkip.amazonaws.com/")
            body_text = page.inner_text("body").strip()
            if re.match(r"\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}", body_text):
                ip = body_text
                logger.info(f"[OK] –¢–µ–∫—É—â–∏–π IP-–∞–¥—Ä–µ—Å: {ip}")
                return ip
                
            logger.error("[FAIL] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å IP-–∞–¥—Ä–µ—Å")
            return None
    except Exception as e:
        logger.error(f"[FAIL] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ IP-–∞–¥—Ä–µ—Å–∞: {str(e)}")
        return None

class Auth:

    def __init__(self, page, account_data):
        self.page = page
        self.username = account_data['username']
        self.password = account_data['password']
        self.tfa_secret = account_data.get("tfa_secret")  # –î–ª—è 2FA
        self.email_username = account_data.get("email_username")  # –î–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –ø–æ—á—Ç—É
        self.email_password = account_data.get("email_password")  # –î–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –ø–æ—á—Ç—É
        self.tfa_api = TFAAPI() if self.tfa_secret else None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏
        self.proxy = account_data.get("proxy", None)
        if self.proxy:
            logger.info(f"üåê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø—Ä–æ–∫—Å–∏: {self.proxy.get('host')}:{self.proxy.get('port')}")
        else:
            logger.info("üåê –ü—Ä–æ–∫—Å–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")

    def login_with_username_and_password(self, browser_data=None, page=None, username=None, password=None,
                                         email_username=None, email_password=None):
        """
        Login to instagram via username and password using Playwright
        """
        assert (self.username and self.password)
        if not username and not password:
            username = self.username
            password = self.password
            
        # Use email credentials from the method parameters or from the class if not provided
        if not email_username:
            email_username = self.email_username
        if not email_password:
            email_password = self.email_password
            
        try:
            # Verify proxy is configured
            if not self.proxy:
                logger.error("[FAIL] –ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –ø—Ä–æ–∫—Å–∏.")
                return None
                
            if not browser_data:
                logger.info("[RETRY] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞...")
                self.browser_data = get_browser(headless=False, proxy=self.proxy)
                logger.info("[SEARCH] –ë—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω –≤ –≤–∏–¥–∏–º–æ–º —Ä–µ–∂–∏–º–µ")
            else:
                self.browser_data = browser_data
                logger.info("[RETRY] –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –±—Ä–∞—É–∑–µ—Ä")
            
            if not page:
                logger.info("[RETRY] –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
                self.page = get_page(self.browser_data)
                logger.info("[OK] –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞")
                
                # Verify IP address if proxy is used
                if self.proxy:
                    logger.info("üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–∫—Å–∏...")
                    ip = verify_ip_address(self.page)
                    if ip:
                        logger.info(f"üåê –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è IP-–∞–¥—Ä–µ—Å: {ip}")
                    else:
                        logger.error("[FAIL] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å IP-–∞–¥—Ä–µ—Å –∏–ª–∏ –ø—Ä–æ–∫—Å–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            else:
                self.page = page
                logger.info("[RETRY] –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É")

            # Navigate to Instagram
            logger.info(f"üåê –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É Instagram: {config['paths']['main']}")
            self.page.goto(config['paths']['main'])
            logger.info("[WAIT] –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
            random_delay("major")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—É—é –∑–∞–¥–µ—Ä–∂–∫—É –≤–º–µ—Å—Ç–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö 8 —Å–µ–∫—É–Ω–¥

            logger.info(f'üë§ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ {username} —á–µ—Ä–µ–∑ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å')

            # Handle cookies dialog if present
            logger.info("[SEARCH] –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ cookies...")
            self._click_cookies()
            logger.info("[WAIT] –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ cookies...")
            random_delay()

            # Check if we need to click login button to get to login page
            try:
                logger.info("[SEARCH] –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ –ª–æ–≥–∏–Ω–∞...")
                login_button = self.page.locator("xpath=" + config['selectors']['login']['log_in_btn'])
                if login_button.is_visible(timeout=config['implicitly_wait'] * 1000):
                    logger.info("üëÜ –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –ª–æ–≥–∏–Ω–∞")
                    login_button.click()
                    logger.info("[WAIT] –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ª–æ–≥–∏–Ω–∞...")
                    random_delay()
                else:
                    # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É –ª–æ–≥–∏–Ω–∞
                    logger.info("[SEARCH] –ü–æ–∏—Å–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏ –ª–æ–≥–∏–Ω–∞...")
                    alt_login_button = self.page.locator("xpath=" + config['selectors']['login']['alternate_log_in_btn'])
                    if alt_login_button.is_visible(timeout=config['implicitly_wait'] * 1000):
                        logger.info("üëÜ –ù–∞–∂–∞—Ç–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏ –ª–æ–≥–∏–Ω–∞")
                        alt_login_button.click()
                        logger.info("[WAIT] –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏ –ª–æ–≥–∏–Ω–∞...")
                        random_delay()
            except Exception as e:
                logger.info(f"[WARN] –ö–Ω–æ–ø–∫–∞ –ª–æ–≥–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤–æ–∑–º–æ–∂–Ω–æ —É–∂–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ª–æ–≥–∏–Ω–∞: {str(e)}")
                pass

            # Fill in username with realistic typing
            logger.info("[SEARCH] –ü–æ–∏—Å–∫ –ø–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
            username_field = self.page.locator("xpath=" + config['selectors']['login']['username_field'])
            logger.info("[WAIT] –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—è –¥–ª—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
            username_field.wait_for(state="visible", timeout=config['explicit_wait'] * 1000)
            logger.info("[CLEAN] –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
            username_field.clear()
            logger.info(f"‚å®Ô∏è –í–≤–æ–¥ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}")
            realistic_type(self.page, "xpath=" + config['selectors']['login']['username_field'], username)

            # Fill in password with realistic typing
            logger.info("[SEARCH] –ü–æ–∏—Å–∫ –ø–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è...")
            password_field = self.page.locator("xpath=" + config['selectors']['login']['password_field'])
            logger.info("[WAIT] –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—è –¥–ª—è –ø–∞—Ä–æ–ª—è...")
            password_field.wait_for(state="visible", timeout=config['explicit_wait'] * 1000)
            logger.info("[CLEAN] –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—è –ø–∞—Ä–æ–ª—è...")
            password_field.clear()
            logger.info("‚å®Ô∏è –í–≤–æ–¥ –ø–∞—Ä–æ–ª—è")
            realistic_type(self.page, "xpath=" + config['selectors']['login']['password_field'], password)

            # –ü—Ä–æ–≤–µ—Ä–∏–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –∫–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞
            logger.info("[SEARCH] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥–∞")
            login_button = self.page.locator("xpath=" + config['selectors']['login']['login_button'])
            logger.info("[WAIT] –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥–∞...")
            login_button.wait_for(state="visible", timeout=config['explicit_wait'] * 1000)
            if not login_button.is_enabled():
                logger.info("[WARN] –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞. –û–∂–∏–¥–∞–Ω–∏–µ...")
                random_delay("major")

            # Click login button
            logger.info("üëÜ –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥–∞")
            login_button = self.page.locator("xpath=" + config['selectors']['login']['login_button'])
            if login_button.is_visible(timeout=config['implicitly_wait'] * 1000):
                login_button.click()
                logger.info("[WAIT] –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥–∞...")
                random_delay("major")
            else:
                # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞
                logger.info("[SEARCH] –ü–æ–∏—Å–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥–∞...")
                alt_login_button = self.page.locator("xpath=" + config['selectors']['login']['alternate_login_button'])
                if alt_login_button.is_visible(timeout=config['implicitly_wait'] * 1000):
                    logger.info("üëÜ –ù–∞–∂–∞—Ç–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥–∞")
                    alt_login_button.click()
                    logger.info("[WAIT] –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥–∞...")
                    random_delay("major")
                else:
                    logger.error("[FAIL] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞")
                    close_browser(self.browser_data)
                    return None

            logger.info("[WAIT] –î–ª–∏—Ç–µ–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞ (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)...")
            random_delay((15.0, 25.0))  # –ë–æ–ª–µ–µ –¥–ª–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            
            # Check for verification code requirement
            try:
                logger.info("[SEARCH] –ü—Ä–æ–≤–µ—Ä–∫–∞, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
                code_field = self.page.locator("xpath=" + config['selectors']['login']['email_code_field'])
                if code_field.is_visible(timeout=config['implicitly_wait'] * 1000):
                    logger.info('‚úâÔ∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã...')
                    
                    if email_username and email_password:
                        logger.info(f"‚úâÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—á—Ç—ã: {email_username}")
                        email = Email(login=email_username, password=email_password)
                        code = email.get_verification_code()
                        
                        if code:
                            logger.info(f"‚å®Ô∏è –í–≤–æ–¥ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {code}")
                            code_field.click()
                            random_delay()
                            realistic_type(self.page, "xpath=" + config['selectors']['login']['email_code_field'], code)
                            random_delay()

                            logger.info("üëÜ –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
                            continue_button = self.page.locator("xpath=" + config['selectors']['login']['continue_button'])
                            continue_button.click()
                            logger.info("[WAIT] –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...")
                            random_delay()
                        else:
                            logger.error("[FAIL] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å –ø–æ—á—Ç—ã")
                else:
                    logger.error("[FAIL] –¢—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å –ø–æ—á—Ç—ã, –Ω–æ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—á—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã")
            except Exception as e:
                logger.info(f"[WARN] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ–ø—É—â–µ–Ω–∞: {str(e)}")
                pass

            # Check for account suspension
            logger.info("[SEARCH] –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞...")
            current_url = self.page.url
            if 'suspended' in current_url:
                logger.error(f'[FAIL] –ê–∫–∫–∞—É–Ω—Ç {username} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ.')
                close_browser(self.browser_data)
                return None

            # Handle save login info dialogs
            self._handle_save_login_info()

            # Check for TFA (Two-Factor Authentication)
            logger.info("[SEARCH] –ü—Ä–æ–≤–µ—Ä–∫–∞, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è...")
            try:
                if any(marker in self.page.url for marker in ['challenge', 'twofactor', 'checkpoint']):
                    logger.info("üîê –î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–¥–∞ TFA
                    if self.tfa_secret:
                        logger.info("üîë –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
                        tfa_code = self.tfa_api.get_totp_code(self.tfa_secret)
                        
                        if tfa_code:
                            logger.info(f"üî¢ –ö–æ–¥ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {tfa_code}")
                            
                            # –ò—â–µ–º –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞
                            security_code_field = self.page.get_by_role("textbox", name="Security Code")
                            if security_code_field.is_visible(timeout=config['implicitly_wait'] * 1000):
                                logger.info("‚å®Ô∏è –í–≤–æ–¥ –∫–æ–¥–∞ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
                                realistic_type(self.page, "//input[@name='verificationCode']", tfa_code)
                                
                                # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                                logger.info("üëÜ –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
                                confirm_button = self.page.get_by_role("button", name="Confirm")
                                if confirm_button.is_visible():
                                    confirm_button.click()
                                    logger.info("[WAIT] –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
                                    random_delay("major")
                                else:
                                    # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
                                    submit_button = self.page.locator("xpath=" + config['selectors']['login']['alternate_submit_button'])
                                    if submit_button.is_visible(timeout=config['implicitly_wait'] * 1000):
                                        submit_button.click()
                                        logger.info("[WAIT] –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
                                        random_delay("major")
                                    else:
                                        logger.error("[FAIL] –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                            else:
                                # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –∫–æ–¥–∞
                                alt_code_field = self.page.locator("xpath=" + config['selectors']['login']['alternate_email_code_field'])
                                if alt_code_field.is_visible(timeout=config['implicitly_wait'] * 1000):
                                    logger.info("‚å®Ô∏è –í–≤–æ–¥ –∫–æ–¥–∞ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –ø–æ–ª–µ...")
                                    realistic_type(self.page, "xpath=" + config['selectors']['login']['alternate_email_code_field'], tfa_code)
                                    
                                    # –ù–∞–∂–∏–º–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                                    logger.info("üëÜ –ù–∞–∂–∞—Ç–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
                                    alt_submit_button = self.page.locator("xpath=" + config['selectors']['login']['alternate_submit_button'])
                                    if alt_submit_button.is_visible(timeout=config['implicitly_wait'] * 1000):
                                        alt_submit_button.click()
                                        logger.info("[WAIT] –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
                                        random_delay("major")
                                    else:
                                        logger.error("[FAIL] –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                                else:
                                    logger.error("[FAIL] –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                        else:
                            logger.error("[FAIL] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
                    else:
                        logger.error("[FAIL] –î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è, –Ω–æ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –Ω–µ —É–∫–∞–∑–∞–Ω")
            except Exception as e:
                logger.info(f"[WARN] –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ–ø—É—â–µ–Ω–∞: {str(e)}")

            # Final check if login successful
            try:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–æ–º–∞—à–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                random_delay("major")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–∫–∏ –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞
                new_post_button = self.page.locator("xpath=" + config['selectors']['upload']['new_post_button'])
                if new_post_button.is_visible(timeout=config['implicitly_wait'] * 1000):
                    logger.info("[OK] –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ Instagram (–Ω–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞)")
                    
                    # Save cookies for future use
                    logger.info("üç™ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ cookies...")
                    cookies_dir = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
                    cookies_dir = os.path.join(cookies_dir, "cookies")
                    os.makedirs(cookies_dir, exist_ok=True)
                    cookies_path = os.path.join(cookies_dir, f"{self.username}_cookies.json")
                    cookies = self.page.context.cookies()
                    with open(cookies_path, "w") as f:
                        json.dump(cookies, f)
                    logger.info(f"üç™ Cookies —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {cookies_path}")
                    
                    return True
                else:
                    logger.info("[SEARCH] –ö–Ω–æ–ø–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã –ø—Ä–æ–≤–µ—Ä–∫–∏...")
                    
                    # Check if we are on the home page
                    current_url = self.page.url
                    if current_url.startswith("https://www.instagram.com/") and not any(marker in current_url for marker in ['login', 'accounts/login', 'challenge', 'suspended']):
                        logger.info("[OK] –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ Instagram (URL —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –¥–æ–º–∞—à–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É)")
                        
                        # Save cookies for future use
                        logger.info("üç™ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ cookies...")
                        cookies_dir = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
                        cookies_dir = os.path.join(cookies_dir, "cookies")
                        os.makedirs(cookies_dir, exist_ok=True)
                        cookies_path = os.path.join(cookies_dir, f"{self.username}_cookies.json")
                        cookies = self.page.context.cookies()
                        with open(cookies_path, "w") as f:
                            json.dump(cookies, f)
                        logger.info(f"üç™ Cookies —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {cookies_path}")
                        
                        return True
                    else:
                        logger.error(f"[FAIL] –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ Instagram. –¢–µ–∫—É—â–∏–π URL: {current_url}")
                        return False
            except Exception as e:
                logger.error(f"[FAIL] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –≤—Ö–æ–¥–∞: {str(e)}")
                return False
        except Exception as e:
            logger.error(f"[FAIL] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ Instagram: {str(e)}")
            return False

    def login(self, cookies_list):
        """
        Login to Instagram using saved cookies
        """
        try:
            self.browser_data = get_browser(headless=False, proxy=self.proxy)
            logger.info("[SEARCH] –ë—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω –≤ –≤–∏–¥–∏–º–æ–º —Ä–µ–∂–∏–º–µ")
            
            self.page = get_page(self.browser_data)
            
            # Load minimal Instagram page first
            logger.info(f"üåê –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É Instagram –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ cookies")
            self.page.goto("https://www.instagram.com/robots.txt")
            
            # Set cookies
            logger.info(f"üç™ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ cookies –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {self.username}")
            self.browser_data["context"].add_cookies(cookies_list)
            
            # Navigate to main Instagram page
            logger.info(f"üåê –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É Instagram")
            self.page.goto(config['paths']['main'])
            
            # Handle save login info dialogs
            self._handle_save_login_info()
            
            # Check if we need to re-login
            current_url = self.page.url
            if any(marker in current_url for marker in ['login', 'accounts/login']):
                logger.info("[RETRY] –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å")
                return self.login_with_username_and_password()
                
            # Check for post button to verify successful login
            logger.info("[SEARCH] –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –≤—Ö–æ–¥–∞...")
            new_post_button = self.page.locator("xpath=" + config['selectors']['upload']['new_post_button'])
            if new_post_button.is_visible(timeout=config['implicitly_wait'] * 1000):
                logger.info("[OK] –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ Instagram —á–µ—Ä–µ–∑ cookies")
                return True
            else:
                logger.info("[WARN] –ö–Ω–æ–ø–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤–æ–∑–º–æ–∂–Ω–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
                return self.login_with_username_and_password()
        except Exception as e:
            logger.error(f"[FAIL] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ —á–µ—Ä–µ–∑ cookies: {str(e)}")
            logger.info("[RETRY] –ü—Ä–æ–±—É–µ–º –≤–æ–π—Ç–∏ —á–µ—Ä–µ–∑ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å")
            return self.login_with_username_and_password()

    def _click_cookies(self):
        """Handle cookie dialogs"""
        try:
            logger.info("[SEARCH] –ü–æ–∏—Å–∫ –¥–∏–∞–ª–æ–≥–∞ –æ cookies...")
            accept_cookies = self.page.locator("xpath=" + config['selectors']['register']['accept_cookies'])
            
            if accept_cookies.is_visible(timeout=config['implicitly_wait'] * 1000):
                logger.info("üëÜ –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—Ä–∏–Ω—è—Ç–∏—è cookies")
                accept_cookies.click()
                random_delay()
                return True
            else:
                # Try alternate cookie button
                alternate_cookies = self.page.locator("xpath=" + config['selectors']['register']['alternate_accept_cookies'])
                if alternate_cookies.is_visible(timeout=config['implicitly_wait'] * 1000):
                    logger.info("üëÜ –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É –ø—Ä–∏–Ω—è—Ç–∏—è cookies")
                    alternate_cookies.click()
                    random_delay()
                    return True
                else:
                    logger.info("‚ÑπÔ∏è –î–∏–∞–ª–æ–≥ –æ cookies –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return False
        except Exception as e:
            logger.info(f"[WARN] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∏–∞–ª–æ–≥–∞ –æ cookies: {str(e)}")
            return False

    def _handle_save_login_info(self):
        """Handle 'Save Login Info' dialogs"""
        try:
            logger.info("[SEARCH] –ü–æ–∏—Å–∫ –¥–∏–∞–ª–æ–≥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –≤—Ö–æ–¥–∞...")
            save_button = self.page.locator("xpath=" + config['selectors']['login']['save_session_button'])
            
            if save_button.is_visible(timeout=config['implicitly_wait'] * 1000):
                logger.info("üëÜ –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
                save_button.click()
                random_delay()
                return True
            else:
                # Try alternate save button
                alt_save_button = self.page.locator("xpath=" + config['selectors']['login']['alternate_save_session_button'])
                if alt_save_button.is_visible(timeout=config['implicitly_wait'] * 1000):
                    logger.info("üëÜ –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
                    alt_save_button.click()
                    random_delay()
                    return True
                
                # Try 'Not Now' button
                not_now_button = self.page.locator("xpath=" + config['selectors']['login']['not_now_button'])
                if not_now_button.is_visible(timeout=config['implicitly_wait'] * 1000):
                    logger.info("üëÜ –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É 'Not Now'")
                    not_now_button.click()
                    random_delay()
                    return True
                    
                logger.info("‚ÑπÔ∏è –î–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
        except Exception as e:
            logger.info(f"[WARN] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∏–∞–ª–æ–≥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")
            return False