from instagrapi import Client
from instagrapi.exceptions import (
    LoginRequired,
    ChallengeRequired,
    TwoFactorRequired,
    PleaseWaitFewMinutes,
    RecaptchaChallengeForm
)
from instagrapi.mixins.challenge import ChallengeChoice
from instagrapi.types import StoryLink
import os
import time
import random
import json
import logging
import requests
import re
import base64
from datetime import datetime
from pathlib import Path

# Use centralized logging - all logs go to django.log
logger = logging.getLogger('instgrapi_func.mainstor')

class AccountParser:
    """–ü–∞—Ä—Å–µ—Ä —Å—Ç—Ä–æ–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞"""
    
    @staticmethod
    def parse_account_string(account_string: str) -> dict:
        """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            logger.info("üîß –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞...")
            
            line = account_string.strip()
            if not line or '||' not in line:
                raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏: {line}")
            
            # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ auth_part||data_part
            auth_part, data_part = line.split('||', 1)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º username –∏ password
            if ':' in auth_part:
                username, password = auth_part.split(':', 1)
            else:
                username = auth_part
                password = ""
            
            # –†–∞–∑–¥–µ–ª—è–µ–º device_info –∏ cookies_part
            parts = data_part.split('|')
            device_info = parts[0] if len(parts) > 0 else ""
            cookies_part = '|'.join(parts[1:]) if len(parts) > 1 else ""
            
            # –ü–∞—Ä—Å–∏–º device_info
            device_parts = device_info.split(';')
            android_device_id = device_parts[0] if len(device_parts) > 0 else ""
            uuid_main = device_parts[1] if len(device_parts) > 1 else ""
            phone_id = device_parts[2] if len(device_parts) > 2 else ""
            client_session_id = device_parts[3] if len(device_parts) > 3 else ""
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ cookies
            sessionid_match = re.search(r'sessionid=([^;]+)', cookies_part)
            sessionid = sessionid_match.group(1) if sessionid_match else ""
            
            user_id_match = re.search(r'ds_user_id=(\d+)', cookies_part)
            user_id = user_id_match.group(1) if user_id_match else ""
            
            mid_match = re.search(r'mid=([^;]+)', cookies_part)
            mid = mid_match.group(1) if mid_match else ""
            
            result = {
                'username': username,
                'password': password,
                'uuid': uuid_main,
                'android_device_id': android_device_id,
                'phone_id': phone_id,
                'client_session_id': client_session_id,
                'sessionid': sessionid,
                'ds_user_id': user_id,
                'mid': mid,
                'valid': bool(sessionid and user_id and uuid_main)
            }
            
            logger.info("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ:")
            logger.info(f"   Username: {result['username']}")
            logger.info(f"   Valid: {result['valid']}")
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            return {'valid': False, 'error': str(e)}

class InstagramStoriesUploader:
    def __init__(self, account_data, proxy_url=None):
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è InstagramStoriesUploader")
        
        self.account_data = account_data
        self.username = account_data.get('username')
        self.password = account_data.get('password')
        self.sessionid = account_data.get('sessionid')
        self.ds_user_id = account_data.get('ds_user_id')
        self.uuid = account_data.get('uuid')
        self.android_device_id = account_data.get('android_device_id')
        self.phone_id = account_data.get('phone_id')
        self.client_session_id = account_data.get('client_session_id')
        self.mid = account_data.get('mid')
        
        self.proxy_url = proxy_url
        self.session_file = f"session_{self.username}.json"
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç
        self.client = Client()
        self.setup_device_settings()
        
        logger.info("‚úÖ InstagramStoriesUploader –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def setup_device_settings(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        device_settings = {
            "cpu": "h1",
            "dpi": "640dpi",
            "model": "SM-G973F", 
            "device": "beyond1",
            "resolution": "1440x3040",
            "app_version": "269.0.0.18.75",
            "manufacturer": "samsung",
            "version_code": "314665256",
            "android_release": "10",
            "android_version": 29
        }
        
        self.client.set_device(device_settings)
        self.client.set_user_agent("Instagram 269.0.0.18.75 Android (29/10; 640dpi; 1440x3040; samsung; SM-G973F; beyond1; exynos9820; en_US; 314665256)")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
        if self.uuid:
            self.client.uuid = self.uuid
            logger.info(f"üîë UUID —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {self.uuid}")
        
        if self.android_device_id:
            self.client.android_device_id = self.android_device_id
            logger.info(f"üì± Device ID —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {self.android_device_id}")
        
        if self.phone_id:
            self.client.phone_id = self.phone_id
            logger.info(f"üìû Phone ID —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {self.phone_id}")
        
        if self.client_session_id:
            self.client.client_session_id = self.client_session_id
            logger.info(f"üì± Client Session ID —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {self.client_session_id}")
        
        self.client.set_country("US")
        self.client.set_locale("en_US")
        logger.info("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    
    def setup_proxy(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏"""
        if self.proxy_url:
            try:
                logger.info("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏...")
                self.client.set_proxy(self.proxy_url)
                logger.info("‚úÖ –ü—Ä–æ–∫—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                return True
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏: {e}")
                return False
        return True
    
    def verify_authentication(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        try:
            logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...")
            
            response = self.client.private_request("accounts/current_user/?edit=true")
            
            if response and response.get('status') == 'ok':
                user_data = response.get('user', {})
                username = user_data.get('username', 'unknown')
                
                logger.info("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")
                logger.info(f"üë§ Username: {username}")
                
                print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")
                print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}")
                
                return True
            else:
                logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç API: {response}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    def login_with_password(self):
        """–û–±—ã—á–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å"""
        try:
            logger.info(f"üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å @{self.username}")
            print(f"üîê –í—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç @{self.username}")
            
            # –û—á–∏—â–∞–µ–º –∫–ª–∏–µ–Ω—Ç
            self.client = Client()
            self.setup_device_settings()
            
            if self.proxy_url:
                self.client.set_proxy(self.proxy_url)
            
            # –í—Ö–æ–¥
            self.client.login(self.username, self.password)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            if self.verify_authentication():
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
                self.client.dump_settings(self.session_file)
                logger.info("üíæ –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
                return True
            else:
                logger.error("‚ùå –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω, –Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    def create_story_links(self, urls_list):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –¥–ª—è —Å—Ç–æ—Ä–∏—Å
        
        Parameters:
        -----------
        urls_list : List[str]
            –°–ø–∏—Å–æ–∫ URL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–æ–∫
            
        Returns:
        --------
        List[StoryLink]
        """
        links = []
        
        for url in urls_list:
            try:
                # ‚úÖ –ü–†–û–°–¢–û–ï —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏
                link = StoryLink(webUri=url)
                links.append(link)
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å—Å—ã–ª–∫–∞: {url}")
                print(f"üîó –°—Å—ã–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {url}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ {url}: {e}")
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ {url}: {e}")
        
        return links
    
    def upload_video_story_with_links(self, video_path, caption="", links_urls=None):
        """
        ‚úÖ –û–°–ù–û–í–ù–û–ô –ú–ï–¢–û–î: –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ –≤ —Å—Ç–æ—Ä–∏—Å —Å–æ —Å—Å—ã–ª–∫–∞–º–∏
        
        Parameters:
        -----------
        video_path : str
            –ü—É—Ç—å –∫ –≤–∏–¥–µ–æ —Ñ–∞–π–ª—É
        caption : str, optional
            –ü–æ–¥–ø–∏—Å—å –∫ —Å—Ç–æ—Ä–∏—Å
        links_urls : List[str], optional
            –°–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            
        Returns:
        --------
        Story or None
        """
        try:
            if not os.path.exists(video_path):
                logger.error(f"‚ùå –í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {video_path}")
                return None
            
            logger.info("üì± –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ –≤ —Å—Ç–æ—Ä–∏—Å —Å–æ —Å—Å—ã–ª–∫–∞–º–∏...")
            print("üì± –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ –≤ —Å—Ç–æ—Ä–∏—Å —Å–æ —Å—Å—ã–ª–∫–∞–º–∏...")
            print(f"üé• –§–∞–π–ª: {Path(video_path).name}")
            print(f"üìù –ü–æ–¥–ø–∏—Å—å: {caption}")
            
            # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫–∏
            links = []
            if links_urls:
                print(f"üîó –î–æ–±–∞–≤–ª—è–µ–º {len(links_urls)} —Å—Å—ã–ª–æ–∫:")
                for url in links_urls:
                    print(f"   ‚Ä¢ {url}")
                links = self.create_story_links(links_urls)
            
            delay = random.uniform(2, 5)
            logger.info(f"‚è≥ –ó–∞–¥–µ—Ä–∂–∫–∞: {delay:.2f} —Å–µ–∫")
            time.sleep(delay)
            
            # ‚úÖ –ó–ê–ì–†–£–ñ–ê–ï–ú –≤–∏–¥–µ–æ —Å–æ —Å—Å—ã–ª–∫–∞–º–∏
            story = self.client.video_upload_to_story(
                path=Path(video_path),
                caption=caption,
                links=links
            )
            
            logger.info(f"‚úÖ –í–∏–¥–µ–æ —Å—Ç–æ—Ä–∏—Å –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {story.pk}")
            print(f"‚úÖ –í–∏–¥–µ–æ —Å—Ç–æ—Ä–∏—Å —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!")
            print(f"üîó Story ID: {story.pk}")
            print(f"üìä –î–æ–±–∞–≤–ª–µ–Ω–æ —Å—Å—ã–ª–æ–∫: {len(links)}")
            
            return story
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ —Å—Ç–æ—Ä–∏—Å: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ —Å—Ç–æ—Ä–∏—Å: {e}")
            return None
    
    def upload_photo_story_with_links(self, photo_path, caption="", links_urls=None):
        """
        ‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –≤ —Å—Ç–æ—Ä–∏—Å —Å–æ —Å—Å—ã–ª–∫–∞–º–∏
        
        Parameters:
        -----------
        photo_path : str
            –ü—É—Ç—å –∫ —Ñ–æ—Ç–æ —Ñ–∞–π–ª—É
        caption : str, optional
            –ü–æ–¥–ø–∏—Å—å –∫ —Å—Ç–æ—Ä–∏—Å
        links_urls : List[str], optional
            –°–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            
        Returns:
        --------
        Story or None
        """
        try:
            if not os.path.exists(photo_path):
                logger.error(f"‚ùå –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {photo_path}")
                return None
            
            logger.info("üì± –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ –≤ —Å—Ç–æ—Ä–∏—Å —Å–æ —Å—Å—ã–ª–∫–∞–º–∏...")
            print("üì± –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ –≤ —Å—Ç–æ—Ä–∏—Å —Å–æ —Å—Å—ã–ª–∫–∞–º–∏...")
            print(f"üìÑ –§–∞–π–ª: {Path(photo_path).name}")
            print(f"üìù –ü–æ–¥–ø–∏—Å—å: {caption}")
            
            # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫–∏
            links = []
            if links_urls:
                print(f"üîó –î–æ–±–∞–≤–ª—è–µ–º {len(links_urls)} —Å—Å—ã–ª–æ–∫:")
                for url in links_urls:
                    print(f"   ‚Ä¢ {url}")
                links = self.create_story_links(links_urls)
            
            delay = random.uniform(2, 5)
            logger.info(f"‚è≥ –ó–∞–¥–µ—Ä–∂–∫–∞: {delay:.2f} —Å–µ–∫")
            time.sleep(delay)
            
            # ‚úÖ –ó–ê–ì–†–£–ñ–ê–ï–ú —Ñ–æ—Ç–æ —Å–æ —Å—Å—ã–ª–∫–∞–º–∏
            story = self.client.photo_upload_to_story(
                path=Path(photo_path),
                caption=caption,
                links=links
            )
            
            logger.info(f"‚úÖ –§–æ—Ç–æ —Å—Ç–æ—Ä–∏—Å –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {story.pk}")
            print(f"‚úÖ –§–æ—Ç–æ —Å—Ç–æ—Ä–∏—Å —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!")
            print(f"üîó Story ID: {story.pk}")
            print(f"üìä –î–æ–±–∞–≤–ª–µ–Ω–æ —Å—Å—ã–ª–æ–∫: {len(links)}")
            
            return story
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ —Å—Ç–æ—Ä–∏—Å: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ —Å—Ç–æ—Ä–∏—Å: {e}")
            return None

def create_uploader_from_string(account_string: str, **kwargs):
    """–°–æ–∑–¥–∞–µ—Ç uploader –∏–∑ —Å—Ç—Ä–æ–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    account_data = AccountParser.parse_account_string(account_string)
    if not account_data.get('valid'):
        raise ValueError(f"–ù–µ–≤–∞–ª–∏–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞: {account_data.get('error')}")
    
    return InstagramStoriesUploader(account_data=account_data, **kwargs)

def main():
    # ‚úÖ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
    ACCOUNT_STRING = "Lorelai.Harrell.M134:lorelai!P7P||android-9e71ad1f7a1316cb;a3d198b5-739d-43c6-8963-43efca20b38d;92dcb9fe-9cfe-4561-8778-9684a7260ed3;92dcb9fe-9cfe-4561-8778-9684a7260ed3|mid=ZwISfAABAAEiQQ4Gdpgj-gFrQCp0;ds_user_id=76044084902;sessionid=76044084902%3ALHu5NnIHDgykl3%3A3%3AAYcaVG-aAyYsKRk4SPJXGPJEthhozGkHjwAy2PZYlA;IG-U-DS-USER-ID=76044084902;Authorization=Bearer IGT:2:eyJkc191c2VyX2lkIjoiNzYwNDQwODQ5MDIiLCJzZXNzaW9uaWQiOiI3NjA0NDA4NDkwMiUzQUxIdTVObklIRGd5a2wzJTNBMyUzQUFZY2FWRy1hQXlZc0tSazRTUEpYR1BKRXRoaG96R2tIandBeTJQWllsQSJ9;||"
    
    CONFIG = {
        "proxy_url": "http://UyBSdD63:rcx9ij7R@193.5.28.171:63686",
        
        # ‚úÖ –ö–û–ù–¢–ï–ù–¢ –î–õ–Ø –°–¢–û–†–ò–° –°–û –°–°–´–õ–ö–ê–ú–ò
        "story_video_path": "/Users/ssuvorin/FindWork/8.mp4",
        "story_photo_path": "/Users/ssuvorin/FindWork/photo.jpg",  # –µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ
        "story_caption": "üì± –ù–æ–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è —Å–æ —Å—Å—ã–ª–∫–∞–º–∏! Swipe up ‚¨ÜÔ∏è",
        
        # ‚úÖ –°–°–´–õ–ö–ò –î–õ–Ø –î–û–ë–ê–í–õ–ï–ù–ò–Ø –í –°–¢–û–†–ò–°
        "story_links": [
            "https://facebook.com"
        ]
    }
    
    print("üöÄ Instagram Stories Uploader —Å–æ —Å—Å—ã–ª–∫–∞–º–∏")
    
    try:
        # –°–æ–∑–¥–∞–µ–º uploader
        uploader = create_uploader_from_string(
            ACCOUNT_STRING,
            proxy_url=CONFIG["proxy_url"]
        )
        
        if not uploader.setup_proxy():
            print("‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏")
            return
        
        # ‚úÖ –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø —á–µ—Ä–µ–∑ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å (–∏–∑–±–µ–≥–∞–µ–º –ø—Ä–æ–±–ª–µ–º —Å sessionid)
        if uploader.login_with_password():
            print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n")
            
            # ‚úÖ –í–´–ë–û–† –¢–ò–ü–ê –ö–û–ù–¢–ï–ù–¢–ê
            print("üéØ –í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å:")
            print("1. üé• –í–∏–¥–µ–æ –≤ —Å—Ç–æ—Ä–∏—Å —Å–æ —Å—Å—ã–ª–∫–∞–º–∏")
            print("2. üì∑ –§–æ—Ç–æ –≤ —Å—Ç–æ—Ä–∏—Å —Å–æ —Å—Å—ã–ª–∫–∞–º–∏")
            
            try:
                choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-2): ").strip()
                
                if choice == "1":
                    print("\nüé• –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ –≤ —Å—Ç–æ—Ä–∏—Å —Å–æ —Å—Å—ã–ª–∫–∞–º–∏...")
                    story = uploader.upload_video_story_with_links(
                        video_path=CONFIG["story_video_path"],
                        caption=CONFIG["story_caption"],
                        links_urls=CONFIG["story_links"]
                    )
                    if story:
                        print("üéâ –í–∏–¥–µ–æ —Å—Ç–æ—Ä–∏—Å —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!")
                    
                elif choice == "2":
                    print("\nüì∑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ –≤ —Å—Ç–æ—Ä–∏—Å —Å–æ —Å—Å—ã–ª–∫–∞–º–∏...")
                    story = uploader.upload_photo_story_with_links(
                        photo_path=CONFIG["story_photo_path"],
                        caption=CONFIG["story_caption"],
                        links_urls=CONFIG["story_links"]
                    )
                    if story:
                        print("üéâ –§–æ—Ç–æ —Å—Ç–æ—Ä–∏—Å —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!")
                    
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
                    
            except KeyboardInterrupt:
                print("\n‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
