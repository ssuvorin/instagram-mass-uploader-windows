from instagrapi import Client
from instagrapi.exceptions import (
    LoginRequired,
    ChallengeRequired,
    TwoFactorRequired,
    PleaseWaitFewMinutes,
    RecaptchaChallengeForm
)
from instagrapi.mixins.challenge import ChallengeChoice
import os
import time
import random
import json
import logging
import requests
import re
import uuid
import base64
from datetime import datetime
from email_client import Email

# Use centralized logging - all logs go to django.log
logger = logging.getLogger('instgrapi_func.mainsess')

class AccountParser:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–µ—Ä —Å—Ç—Ä–æ–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    
    @staticmethod
    def parse_account_string(account_string: str) -> dict:
        """
        –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
        Username:Password||device_info|cookies_and_session_data
        
        Parameters:
        -----------
        account_string : str
            –ü–æ–ª–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞
            
        Returns:
        --------
        dict : –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞
        """
        try:
            logger.info("üîß –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞...")
            
            # –û—á–∏—â–∞–µ–º —Å—Ç—Ä–æ–∫—É
            line = account_string.strip()
            
            if not line or '||' not in line:
                raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏: {line}")
            
            # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–Ω—ã–µ —á–∞—Å—Ç–∏: auth_part||data_part
            auth_part, data_part = line.split('||', 1)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º username –∏ password
            if ':' in auth_part:
                username, password = auth_part.split(':', 1)
            else:
                username = auth_part
                password = ""
            
            logger.info(f"üë§ Username: {username}")
            logger.info(f"üîë Password: {'*' * len(password)}")
            
            # –†–∞–∑–¥–µ–ª—è–µ–º device_info –∏ cookies_part
            parts = data_part.split('|')
            device_info = parts[0] if len(parts) > 0 else ""
            cookies_part = '|'.join(parts[1:]) if len(parts) > 1 else ""
            
            logger.info(f"üì± Device info: {device_info}")
            logger.info(f"üç™ Cookies part length: {len(cookies_part)}")
            
            # –ü–∞—Ä—Å–∏–º device_info: android-device_id;uuid1;uuid2;uuid3
            device_parts = device_info.split(';')
            android_device_id = device_parts[0] if len(device_parts) > 0 else ""
            uuid_main = device_parts[1] if len(device_parts) > 1 else ""
            phone_id = device_parts[2] if len(device_parts) > 2 else ""
            client_session_id = device_parts[3] if len(device_parts) > 3 else ""
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ cookies_part
            sessionid_match = re.search(r'sessionid=([^;]+)', cookies_part)
            sessionid = sessionid_match.group(1) if sessionid_match else ""
            
            user_id_match = re.search(r'ds_user_id=(\d+)', cookies_part)
            user_id = user_id_match.group(1) if user_id_match else ""
            
            mid_match = re.search(r'mid=([^;]+)', cookies_part)
            mid = mid_match.group(1) if mid_match else ""
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º Authorization Bearer —Ç–æ–∫–µ–Ω
            auth_match = re.search(r'Authorization=Bearer\s+([^;]+)', cookies_part)
            auth_token = auth_match.group(1) if auth_match else ""
            
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º Authorization –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è authorization_data
            authorization_data = {}
            if auth_token and auth_token.startswith('IGT:2:'):
                try:
                    b64_part = auth_token.split('IGT:2:')[1]
                    decoded = base64.b64decode(b64_part).decode()
                    authorization_data = json.loads(decoded)
                    logger.info("‚úÖ Authorization data –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è authorization: {e}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = {
                # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                'username': username,
                'password': password,
                
                # UUID –¥–∞–Ω–Ω—ã–µ
                'uuid': uuid_main,
                'android_device_id': android_device_id,
                'phone_id': phone_id,
                'client_session_id': client_session_id,
                
                # –°–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                'sessionid': sessionid,
                'ds_user_id': user_id,
                'mid': mid,
                'authorization_token': auth_token,
                'authorization_data': authorization_data,
                
                # –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
                'device_info_raw': device_info,
                'cookies_raw': cookies_part,
                
                # –í–∞–ª–∏–¥–Ω–æ—Å—Ç—å
                'valid': bool(sessionid and user_id and uuid_main)
            }
            
            logger.info("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ:")
            logger.info(f"   Username: {result['username']}")
            logger.info(f"   UUID: {result['uuid']}")
            logger.info(f"   Device ID: {result['android_device_id']}")
            logger.info(f"   SessionID: {result['sessionid'][:20]}...")
            logger.info(f"   User ID: {result['ds_user_id']}")
            logger.info(f"   Valid: {result['valid']}")
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏: {e}")
            logger.error(f"   –°—Ç—Ä–æ–∫–∞: {account_string[:100]}...")
            return {'valid': False, 'error': str(e)}

class TwoFactorAuthHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ 2FA –∫–æ–¥–æ–≤ —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–π API"""
    
    def __init__(self, api_base_url: str = "https://2fa.fb.rip/api/otp"):
        self.api_base_url = api_base_url
        
    def get_2fa_code(self, account_token: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ 2FA –∫–æ–¥–∞ –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ API"""
        try:
            url = f"{self.api_base_url}/{account_token}"
            logger.info(f"üîê –ü–æ–ª—É—á–∞–µ–º 2FA –∫–æ–¥ —Å API: {url}")
            
            response = requests.get(url, timeout=10)
            response.raise_for_status()
            
            data = response.json()
            logger.info(f"üì° 2FA API Response: {json.dumps(data, indent=2)}")
            
            if data.get('ok') and 'data' in data and 'otp' in data['data']:
                otp_code = data['data']['otp']
                time_remaining = data['data'].get('timeRemaining', 0)
                
                logger.info(f"‚úÖ 2FA –∫–æ–¥ –ø–æ–ª—É—á–µ–Ω: {otp_code} (–æ—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: {time_remaining}—Å–µ–∫)")
                return otp_code
            else:
                logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ 2FA API: {data}")
                return ""
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ 2FA –∫–æ–¥–∞: {e}")
            return ""

class InstagramFullLogger:
    """–ü–æ–ª–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö API –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤ Instagram"""
    
    def __init__(self, client):
        self.client = client
        self.setup_full_logging()
    
    def setup_full_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö API –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π"""
        logger.info("üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ü–û–õ–ù–û–ï –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ API...")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        original_private_request = self.client.private_request
        original_public_request = self.client.public_request
        
        def logged_private_request(endpoint, data=None, params=None, **kwargs):
            """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ private API –∑–∞–ø—Ä–æ—Å–æ–≤"""
            logger.info("=" * 80)
            logger.info(f"üì§ PRIVATE API REQUEST")
            logger.info("=" * 80)
            logger.info(f"üîó Endpoint: {endpoint}")
            logger.info(f"üìä Method: POST")
            
            if data:
                if isinstance(data, dict):
                    logger.info(f"üìã Data (dict): {json.dumps(data, indent=2, ensure_ascii=False, default=str)}")
                elif isinstance(data, str):
                    logger.info(f"üìã Data (str): {data}")
                else:
                    logger.info(f"üìã Data (type: {type(data)}): {str(data)}")
            
            if params:
                logger.info(f"üîç Params: {json.dumps(params, indent=2, ensure_ascii=False, default=str)}")
            
            if kwargs:
                logger.info(f"‚öôÔ∏è Kwargs: {json.dumps(kwargs, indent=2, ensure_ascii=False, default=str)}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º headers
            if hasattr(self.client.private, 'headers'):
                logger.info(f"üì® Headers: {json.dumps(dict(self.client.private.headers), indent=2, ensure_ascii=False, default=str)}")
            
            try:
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
                start_time = time.time()
                response = original_private_request(endpoint, data, params, **kwargs)
                duration = time.time() - start_time
                
                logger.info("=" * 80)
                logger.info(f"üì• PRIVATE API RESPONSE")
                logger.info("=" * 80)
                logger.info(f"‚è±Ô∏è Duration: {duration:.3f}s")
                logger.info(f"‚úÖ Success Response: {json.dumps(response, indent=2, ensure_ascii=False, default=str)}")
                
                return response
                
            except Exception as e:
                duration = time.time() - start_time
                logger.info("=" * 80)
                logger.info(f"üì• PRIVATE API ERROR RESPONSE")
                logger.info("=" * 80)
                logger.info(f"‚è±Ô∏è Duration: {duration:.3f}s")
                logger.error(f"‚ùå Error: {e}")
                
                # –õ–æ–≥–∏—Ä—É–µ–º last_json –ø—Ä–∏ –æ—à–∏–±–∫–µ
                if hasattr(self.client, 'last_json') and self.client.last_json:
                    logger.info(f"üîç Last JSON: {json.dumps(self.client.last_json, indent=2, ensure_ascii=False, default=str)}")
                
                # –õ–æ–≥–∏—Ä—É–µ–º last_response –ø—Ä–∏ –æ—à–∏–±–∫–µ
                if hasattr(self.client, 'last_response') and self.client.last_response:
                    logger.info(f"üì° Response Status: {self.client.last_response.status_code}")
                    logger.info(f"üì® Response Headers: {json.dumps(dict(self.client.last_response.headers), indent=2, ensure_ascii=False, default=str)}")
                    logger.info(f"üìÑ Response Text: {self.client.last_response.text}")
                
                raise
        
        def logged_public_request(url, **kwargs):
            """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ public API –∑–∞–ø—Ä–æ—Å–æ–≤"""
            logger.info("=" * 80)
            logger.info(f"üì§ PUBLIC API REQUEST")
            logger.info("=" * 80)
            logger.info(f"üîó URL: {url}")
            logger.info(f"‚öôÔ∏è Kwargs: {json.dumps(kwargs, indent=2, ensure_ascii=False, default=str)}")
            
            try:
                start_time = time.time()
                response = original_public_request(url, **kwargs)
                duration = time.time() - start_time
                
                logger.info("=" * 80)
                logger.info(f"üì• PUBLIC API RESPONSE")
                logger.info("=" * 80)
                logger.info(f"‚è±Ô∏è Duration: {duration:.3f}s")
                logger.info(f"‚úÖ Response: {response}")
                
                return response
                
            except Exception as e:
                duration = time.time() - start_time
                logger.error(f"‚ùå Public API Error ({duration:.3f}s): {e}")
                raise
        
        # –ü–æ–¥–º–µ–Ω—è–µ–º –º–µ—Ç–æ–¥—ã
        self.client.private_request = logged_private_request
        self.client.public_request = logged_public_request
        
        logger.info("‚úÖ –ü–æ–ª–Ω–æ–µ API –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")

class InstagramNativeUploader:
    def __init__(self, account_string: str, additional_config: dict = None):
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è InstagramNativeUploader")
        
        # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞
        self.account_data = AccountParser.parse_account_string(account_string)
        
        if not self.account_data.get('valid'):
            raise ValueError(f"–ù–µ–≤–∞–ª–∏–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞: {self.account_data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        additional_config = additional_config or {}
        self.proxy_url = additional_config.get('proxy_url')
        self.email_login = additional_config.get('email_login')
        self.email_password = additional_config.get('email_password')
        self.twofa_token = additional_config.get('twofa_token')
        
        # Email –∫–ª–∏–µ–Ω—Ç
        if self.email_login and self.email_password:
            try:
                self.email_client = Email(self.email_login, self.email_password)
                logger.info("‚úÖ Email –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ email –∫–ª–∏–µ–Ω—Ç–∞: {e}")
                self.email_client = None
        else:
            self.email_client = None
        
        # 2FA –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        if self.twofa_token:
            self.twofa_handler = TwoFactorAuthHandler()
            logger.info("‚úÖ 2FA –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω")
        else:
            self.twofa_handler = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç
        self.client = Client()
        
        # ‚úÖ –ù–ê–°–¢–†–ê–ò–í–ê–ï–ú –ü–û–õ–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
        self.full_logger = InstagramFullLogger(self.client)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –Ω–∞—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é —á–µ—Ä–µ–∑ auth.py
        self.setup_native_session()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.client.challenge_code_handler = self.challenge_code_handler
        
        logger.info("‚úÖ InstagramNativeUploader –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def setup_native_session(self):
        """
        ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–∏ —á–µ—Ä–µ–∑ –Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã auth.py
        """
        try:
            logger.info("üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –Ω–∞—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é —á–µ—Ä–µ–∑ auth.py...")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ UUID
            def generate_uuid():
                return str(uuid.uuid4())
            
            # ‚úÖ –°–û–ó–î–ê–ï–ú –ü–û–õ–ù–´–ï SETTINGS —Å–æ–≥–ª–∞—Å–Ω–æ get_settings() –≤ auth.py
            settings = {
                # UUID –¥–∞–Ω–Ω—ã–µ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ + –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ)
                "uuids": {
                    "phone_id": self.account_data.get('phone_id') or generate_uuid(),
                    "uuid": self.account_data.get('uuid'),
                    "client_session_id": self.account_data.get('client_session_id') or generate_uuid(),
                    "advertising_id": generate_uuid(),  # –í—Å–µ–≥–¥–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π
                    "android_device_id": self.account_data.get('android_device_id'),
                    "request_id": generate_uuid(),  # –í—Å–µ–≥–¥–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π
                    "tray_session_id": generate_uuid(),  # –í—Å–µ–≥–¥–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π
                },
                
                # MID –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞
                "mid": self.account_data.get('mid'),
                
                # Authorization data (–≥–ª–∞–≤–Ω–æ–µ!)
                "authorization_data": self.account_data.get('authorization_data', {
                    "ds_user_id": self.account_data.get('ds_user_id'),
                    "sessionid": self.account_data.get('sessionid'),
                    "should_use_header_over_cookies": True,
                }),
                
                # Cookies
                "cookies": {
                    "sessionid": self.account_data.get('sessionid'),
                    "ds_user_id": self.account_data.get('ds_user_id'),
                    "mid": self.account_data.get('mid'),
                    "csrftoken": self.generate_csrf_token(),
                },
                
                # Device settings (—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —Å auth.py)
                "device_settings": {
                    "app_version": "269.0.0.18.75",
                    "android_version": 29,
                    "android_release": "10",
                    "dpi": "640dpi",
                    "resolution": "1440x3040",
                    "manufacturer": "samsung",
                    "device": "beyond1",
                    "model": "SM-G973F",
                    "cpu": "h1",
                    "version_code": "314665256",
                },
                
                # User agent
                "user_agent": "Instagram 269.0.0.18.75 Android (29/10; 640dpi; 1440x3040; samsung; SM-G973F; beyond1; exynos9820; en_US; 314665256)",
                
                # –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è
                "country": "US",
                "country_code": 1,
                "locale": "en_US",
                "timezone_offset": -28800,
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                "ig_u_rur": "",
                "ig_www_claim": "",
                "last_login": None,
            }
            
            logger.info("üìã –°–æ–∑–¥–∞–Ω—ã –ø–æ–ª–Ω—ã–µ settings:")
            logger.info(f"   Username: {self.account_data['username']}")
            logger.info(f"   UUID: {settings['uuids']['uuid']}")
            logger.info(f"   Android Device ID: {settings['uuids']['android_device_id']}")
            logger.info(f"   SessionID: {settings['authorization_data']['sessionid'][:20]}...")
            logger.info(f"   User ID: {settings['authorization_data']['ds_user_id']}")
            logger.info(f"   MID: {settings['mid']}")
            
            # ‚úÖ –ü–†–ò–ú–ï–ù–Ø–ï–ú SETTINGS —á–µ—Ä–µ–∑ –Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ set_settings() –∏–∑ auth.py
            logger.info("üîß –ü—Ä–∏–º–µ–Ω—è–µ–º settings —á–µ—Ä–µ–∑ set_settings() –∏–∑ auth.py...")
            self.client.set_settings(settings)
            
            logger.info("‚úÖ –ù–∞—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —á–µ—Ä–µ–∑ auth.py")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏: {e}")
            raise
    
    def generate_csrf_token(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è CSRF —Ç–æ–∫–µ–Ω–∞"""
        import string
        return ''.join(random.choices(string.ascii_letters + string.digits, k=64))
    
    def challenge_code_handler(self, username, choice):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ challenge —Å –ø–æ–ª–Ω—ã–º JSON –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        logger.info("=" * 80)
        logger.info("üîê CHALLENGE HANDLER –ê–ö–¢–ò–í–ò–†–û–í–ê–ù –° –ü–û–õ–ù–´–ú –õ–û–ì–ò–†–û–í–ê–ù–ò–ï–ú")
        logger.info("=" * 80)
        logger.info(f"üë§ Username: {username}")
        logger.info(f"üìß Choice: {choice}")
        logger.info(f"üìß Choice Type: {type(choice)}")
        
        print(f"\nüîê CHALLENGE –î–ï–¢–ê–õ–ò:")
        print(f"üë§ Username: {username}")
        print(f"üìß Choice: {choice}")
        
        # ‚úÖ –ü–û–õ–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê CHALLENGE JSON
        try:
            if hasattr(self.client, 'last_json') and self.client.last_json:
                logger.info("üìã –ü–û–õ–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û CHALLENGE:")
                logger.info("=" * 60)
                
                # –ö—Ä–∞—Å–∏–≤–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º JSON
                challenge_json = json.dumps(self.client.last_json, indent=2, ensure_ascii=False, default=str)
                logger.info(f"üîç Challenge JSON:\n{challenge_json}")
                
                print("\nüìã –î–ï–¢–ê–õ–ò CHALLENGE:")
                print("=" * 60)
                print(challenge_json)
                print("=" * 60)
                
            else:
                logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö last_json –æ—Ç Instagram")
                print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö last_json –æ—Ç Instagram")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ challenge: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
        
        # Email challenge –æ–±—Ä–∞–±–æ—Ç–∫–∞
        if choice == ChallengeChoice.EMAIL and self.email_client:
            logger.info("üìß –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –∏–∑ email...")
            print("üìß –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ –∏–∑ email...")
            
            time.sleep(10)
            
            for attempt in range(3):
                try:
                    code = self.email_client.get_verification_code()
                    if code and len(code) == 6 and code.isdigit():
                        logger.info(f"‚úÖ –ö–æ–¥ –ø–æ–ª—É—á–µ–Ω: {code}")
                        print(f"‚úÖ –ö–æ–¥ –ø–æ–ª—É—á–µ–Ω: {code}")
                        return code
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                
                if attempt < 2:
                    time.sleep(15)
        
        # –†—É—á–Ω–æ–π –≤–≤–æ–¥
        logger.info("‚å®Ô∏è –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä—É—á–Ω–æ–º—É –≤–≤–æ–¥—É")
        print("‚å®Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ email/SMS:")
        
        while True:
            try:
                code = input("–í–≤–µ–¥–∏—Ç–µ 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥: ").strip()
                if len(code) == 6 and code.isdigit():
                    logger.info(f"‚úÖ –ö–æ–¥ –≤–≤–µ–¥–µ–Ω: {code}")
                    return code
                else:
                    print("‚ùå –ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 6 —Ü–∏—Ñ—Ä")
            except KeyboardInterrupt:
                logger.error("‚ùå –í–≤–æ–¥ –∫–æ–¥–∞ –ø—Ä–µ—Ä–≤–∞–Ω")
                raise Exception("–í–≤–æ–¥ –∫–æ–¥–∞ –ø—Ä–µ—Ä–≤–∞–Ω")
    
    def setup_proxy(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏"""
        if self.proxy_url:
            try:
                logger.info("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏...")
                self.client.set_proxy(self.proxy_url)
                logger.info("‚úÖ –ü—Ä–æ–∫—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                return True
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏: {e}")
                return False
        return True
    
    def verify_native_session(self):
        """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏"""
        try:
            logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é...")
            
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ª—é–±–æ–π authenticated –∑–∞–ø—Ä–æ—Å
            response = self.client.private_request("accounts/current_user/?edit=true")
            
            if response and response.get('status') == 'ok':
                username = response.get('user', {}).get('username', 'unknown')
                full_name = response.get('user', {}).get('full_name', '')
                
                logger.info("‚úÖ –ù–∞—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –≤–∞–ª–∏–¥–Ω–∞!")
                logger.info(f"üë§ Username: {username}")
                logger.info(f"üìù Full Name: {full_name}")
                
                print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –Ω–∞—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é —É—Å–ø–µ—à–Ω–∞!")
                print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}")
                
                return True
            else:
                logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏: {e}")
            return False

    
    def upload_reel(self, video_path, caption):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∏–ª—Å–∞ —Å –ø–æ–ª–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        try:
            if not os.path.exists(video_path):
                logger.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {video_path}")
                return None
            
            logger.info("üé¨ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∏–ª—Å —á–µ—Ä–µ–∑ –Ω–∞—Ç–∏–≤–Ω—ã–π –∫–ª–∏–µ–Ω—Ç...")
            print("üé¨ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∏–ª—Å...")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
            delay = random.uniform(2, 5)
            logger.info(f"‚è≥ –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π: {delay:.2f}—Å")
            time.sleep(delay)
            
            media = self.client.clip_upload(
                path=video_path,
                caption=caption
            )
            
            logger.info(f"‚úÖ –†–∏–ª—Å –∑–∞–≥—Ä—É–∂–µ–Ω: {media.code}")
            print(f"‚úÖ –†–∏–ª—Å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")
            print(f"üîó https://www.instagram.com/p/{media.code}/")
            
            return media
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            return None


def main():
    # ‚úÖ –ü–†–û–°–¢–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø - –û–î–ù–ê –°–¢–†–û–ö–ê –ê–ö–ö–ê–£–ù–¢–ê
    ACCOUNT_STRING = "Itzel_Bryant_C432:itzel@A4A||android-android-8535sa7s;648333d1-0bd5-4d08-7e94-c1bf2cdfe708;4fa9206b-d663-4780-00e9-3d347b945589;4fa9206b-d663-4780-00e9-3d347b945589|mid=Zv2WtgABAAFRmIQPJb1vnPY9DgRe;ds_user_id=76236682361;sessionid=76236682361%3AAoCiIzI8NpDVvd%3A18%3AAYf16kMIlcoMHJPydY3Vkl0f3JRLyLDV9Z5SdQGoRQ;IG-U-DS-USER-ID=76236682361;Authorization=Bearer IGT:2:eyJkc191c2VyX2lkIjoiNzYyMzY2ODIzNjEiLCJzZXNzaW9uaWQiOiI3NjIzNjY4MjM2MSUzQUFvQ2lJekk4TnBEVnZkJTNBMTglM0FBWWYxNmtNSWxjb01ISlB5ZFkzVmtsMGYzSlJMeUxEVjlaNVNkUUdvUlEifQ==;||"
    
    # ‚úÖ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
    ADDITIONAL_CONFIG = {
        "proxy_url": "http://UyBSdD63:rcx9ij7R@45.89.231.68:64936",
        "email_login": "",  # –î–ª—è challenge (–µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è)
        "email_password": "",
        "twofa_token": "",  # –î–ª—è 2FA (–µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è)
        
        # –ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        "video_path": "/Users/ssuvorin/FindWork/1.mp4",
        "caption": """–£–ª—ã–±–Ω—É–ª–∏—Å—å? –¢–æ–≥–¥–∞ —Å–¥–µ–ª–∞–π—Ç–µ –µ—â—ë –æ–¥–∏–Ω –º–∞–ª–µ–Ω—å–∫–∏–π, –Ω–æ –≤–∞–∂–Ω—ã–π —à–∞–≥ ‚Äì –ø–æ–¥–¥–µ—Ä–∂–∏—Ç–µ –º–µ–Ω—è! üòå–ü–æ—Å—Ç–∞–≤—å—Ç–µ –ª–∞–π–∫ ‚ù§Ô∏è –∏ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å üîî, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –µ—â—ë –±–æ–ª—å—à–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –∏ —Å–º–µ—à–Ω—ã—Ö —Ä–æ–ª–∏–∫–æ–≤! #caspin11 #caspin12 #funny"""
    }
    
    print("üöÄ Instagram Uploader —Å –ø–æ–ª–Ω—ã–º API –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –∞–≤—Ç–æ–ø–∞—Ä—Å–∏–Ω–≥–æ–º")
    
    try:
        # –°–æ–∑–¥–∞–µ–º uploader —Å –∞–≤—Ç–æ–ø–∞—Ä—Å–∏–Ω–≥–æ–º —Å—Ç—Ä–æ–∫–∏
        uploader = InstagramNativeUploader(ACCOUNT_STRING, ADDITIONAL_CONFIG)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–∫—Å–∏
        if not uploader.setup_proxy():
            print("‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏")
            return
        
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        time.sleep(random.uniform(2, 5))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
        if uploader.verify_native_session():
            print("‚úÖ –ù–∞—Ç–∏–≤–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
            time.sleep(random.uniform(3, 7))
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∏–ª—Å
            media = uploader.upload_reel(
                video_path=ADDITIONAL_CONFIG["video_path"],
                caption=ADDITIONAL_CONFIG["caption"]
            )
            
            if media:
                print("üéâ –£—Å–ø–µ—à–Ω–æ —á–µ—Ä–µ–∑ –Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Å –ø–æ–ª–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º!")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Ç–∏–≤–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main()
